{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GH-Repos: GitHub Pages as APT Repositories","text":"<p>Welcome to GH-Repos, a powerful solution for creating and managing APT repositories using GitHub Pages with automated package building, signing, and deployment.</p>"},{"location":"#overview","title":"Overview","text":"<p>GH-Repos enables you to:</p> <ul> <li>\ud83c\udfd7\ufe0f Build Debian packages in a containerized environment</li> <li>\ud83d\udd10 Sign packages with GPG for security and authenticity</li> <li>\ud83d\udce6 Host APT repositories on GitHub Pages</li> <li>\ud83d\ude80 Automate the entire package lifecycle</li> <li>\ud83d\udd04 Scale beyond just APT repositories</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#automated-package-management","title":"Automated Package Management","text":"<ul> <li>Containerized build environment using Dev Containers</li> <li>Automated GPG signing with proper key management</li> <li>GitHub Actions integration for CI/CD workflows</li> <li>Support for multiple package architectures</li> </ul>"},{"location":"#security-first","title":"Security First","text":"<ul> <li>GPG signing for all packages and repository metadata</li> <li>Secure key management with hardware token support</li> <li>Cryptographic verification of package integrity</li> <li>Trusted package distribution</li> </ul>"},{"location":"#developer-friendly","title":"Developer Friendly","text":"<ul> <li>Simple workflow: fork, customize, release</li> <li>Docker-based development environment</li> <li>Cross-platform compatibility (Linux focus)</li> <li>Extensive documentation and examples</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Get Started - Step-by-step setup guide</li> <li>Understand the Design - Architecture overview</li> <li>Customize - Adapt to your needs</li> <li>View Releases - See what's new</li> </ol>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#personal-package-distribution","title":"Personal Package Distribution","text":"<p>Host your own custom Debian packages with professional-grade infrastructure.</p>"},{"location":"#organization-package-management","title":"Organization Package Management","text":"<p>Distribute internal tools and libraries to your team or organization.</p>"},{"location":"#open-source-projects","title":"Open Source Projects","text":"<p>Provide easy installation for your users through APT repositories.</p>"},{"location":"#software-vendors","title":"Software Vendors","text":"<p>Deliver commercial software with trusted package management.</p>"},{"location":"#architecture-highlights","title":"Architecture Highlights","text":"<pre><code>graph TD\n    A[Source Code] --&gt; B[Dev Container]\n    B --&gt; C[Build Packages]\n    C --&gt; D[Sign with GPG]\n    D --&gt; E[Publish to GitHub Pages]\n    E --&gt; F[APT Repository]\n    F --&gt; G[End Users]</code></pre> <p>The system uses a Dev Container approach ensuring consistent builds across different environments while maintaining security through proper user mapping and GPG key management.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to create your own APT repository? Head over to our Getting Started Guide to begin your journey.</p> <p>For a deeper understanding of how everything works, check out our Design &amp; Architecture documentation.</p> <p>Built with \u2764\ufe0f for the open source community</p>"},{"location":"build/","title":"Build Process","text":"<p>The GH-Repos build system uses a series of scripts to handle different aspects of package creation, repository generation, and deployment. The process is split between container-based operations (for consistent builds) and host operations (for secure signing and publishing).</p>"},{"location":"build/#container-scripts-run-inside-debian-12-container","title":"Container Scripts (Run inside Debian 12 container)","text":"<p>Different scripts handle steps in the build process within the Debian 12 container:</p>"},{"location":"build/#1-mkdocssh-website-generation","title":"1. mkdocs.sh - Website Generation","text":"<p>Uses MkDocs to generate the GitHub Pages website in <code>/docs</code>: - Builds documentation from <code>mkdocs/</code> directory - Preserves existing APT repository if present - Creates <code>.nojekyll</code> file for GitHub Pages - Validates build output and provides summary</p>"},{"location":"build/#2-mkdebssh-package-creation","title":"2. mkdebs.sh - Package Creation","text":"<p>Creates Debian packages from sources under <code>/pkgs/&lt;pkg_name&gt;</code>: - Scans for package directories with <code>DEBIAN/control</code> files - Validates package metadata (Package, Version, Architecture fields) - Runs custom build scripts if present (<code>build.sh</code>) - Creates <code>.deb</code> packages with proper permissions - Verifies package integrity after creation - Outputs packages to <code>debs/</code> directory</p>"},{"location":"build/#3-mkreposh-repository-structure","title":"3. mkrepo.sh - Repository Structure","text":"<p>Creates the APT repository structure under <code>/docs/apt</code>: - Copies GPG public key (<code>keys/apt-repo-pubkey.asc</code>) into repository - Copies all build artifacts (<code>.deb</code> packages) to repository pool - Generates repository metadata (Packages, Release files) - Creates compressed package indices (<code>.gz</code>, <code>.bz2</code>) - Supports multiple architectures (amd64, arm64, all) - Generates user-friendly setup scripts and documentation</p>"},{"location":"build/#host-scripts-run-outside-container","title":"Host Scripts (Run outside container)","text":"<p>These scripts execute outside of the container on the host where security credentials are properly configured:</p>"},{"location":"build/#4-signreposh-gpg-signing","title":"4. signrepo.sh - GPG Signing","text":"<p>Cryptographically signs repository files and artifacts: - Signs individual <code>.deb</code> packages with detached signatures - Signs repository Release file (creates <code>Release.gpg</code> and <code>InRelease</code>) - Auto-detects or uses specified GPG key - Verifies all signatures after creation - Creates verification scripts for users - Supports hardware tokens and secure key management</p>"},{"location":"build/#5-publishsh-git-publishing","title":"5. publish.sh - Git Publishing","text":"<p>Commits and tags version on main branch for GitHub Pages deployment: - Stages <code>docs/</code> directory changes - Creates descriptive commit with build information - Creates annotated git tag for version - Pushes changes to remote repository - Generates deployment documentation - Provides GitHub Pages configuration instructions</p>"},{"location":"build/#6-releasesh-github-releases","title":"6. release.sh - GitHub Releases","text":"<p>Creates GitHub releases with downloadable artifacts using GitHub CLI: - Packages all <code>.deb</code> files as release assets - Generates SHA256 checksums for verification - Creates installation scripts for users - Builds comprehensive release notes with package details - Archives complete APT repository structure - Supports GPG signing of checksums</p>"},{"location":"build/#build-orchestration","title":"Build Orchestration","text":""},{"location":"build/#buildsh-main-orchestrator","title":"build.sh - Main Orchestrator","text":"<p>The primary build script that coordinates the entire process: - Detects container vs host environment - Executes container scripts in proper sequence - Handles Docker container management if needed - Provides comprehensive build reporting - Validates each step before proceeding</p>"},{"location":"build/#security-architecture","title":"Security Architecture","text":"<p>No git commits, tags, or GPG signing occurs within the container environment. The Debian package infrastructure builds artifacts using tools designed for Debian within a clean Debian environment. Container script invocations occur when <code>build.sh</code> runs on the host and fires up the container.</p> <p>The commit, tag, and APT repository files' GPG signing, releasing, and publishing to GitHub occurs outside of the container where the user may be using a hardware token and/or has everything securely setup and configured within a trusted environment (i.e., logged into GitHub CLI).</p>"},{"location":"build/#why-this-separation","title":"Why This Separation?","text":"<p>Security Philosophy: Don't mess with passing around hardware tokens, or passing sockets, and building the GPG stack inside a container. Don't install and move keys around into the container. Just do what you need inside and GTFO.</p> <p>This approach: - \u2705 Keeps secrets secure - No keys in containers - \u2705 Supports hardware tokens - Works with YubiKeys, etc. - \u2705 Simplifies container - Clean, minimal build environment - \u2705 Enables host tools - Use configured git, GPG, GitHub CLI - \u2705 Maintains isolation - Build environment stays clean</p>"},{"location":"build/#typical-workflow","title":"Typical Workflow","text":"<pre><code># 1. Build everything (container operations)\n./scripts/build.sh\n\n# 2. Sign repository (host operation)  \n./scripts/signrepo.sh\n\n# 3. Publish to GitHub Pages (host operation)\n./scripts/publish.sh v1.0.0\n\n# 4. Create GitHub release (host operation)\n./scripts/release.sh v1.0.0\n</code></pre>"},{"location":"build/#script-dependencies","title":"Script Dependencies","text":""},{"location":"build/#container-requirements","title":"Container Requirements","text":"<ul> <li>Debian 12 environment</li> <li><code>mkdocs</code> and Python packages</li> <li><code>dpkg-deb</code> and Debian build tools</li> <li>Standard Unix utilities (<code>find</code>, <code>tar</code>, <code>gzip</code>, etc.)</li> </ul>"},{"location":"build/#host-requirements","title":"Host Requirements","text":"<ul> <li>Git (for version control operations)</li> <li>GPG (for signing operations)</li> <li>GitHub CLI (<code>gh</code>) for release creation</li> <li>Docker (if not running in dev container)</li> </ul>"},{"location":"build/#error-handling","title":"Error Handling","text":"<p>All scripts include comprehensive error handling: - Exit on error (<code>set -euo pipefail</code>) - Input validation with helpful error messages - Dependency checking before operations - Cleanup on failure where appropriate - Detailed logging for troubleshooting</p>"},{"location":"build/#customization","title":"Customization","text":"<p>Scripts support customization through environment variables: - <code>GPG_KEY_ID</code> - Specify signing key - <code>RELEASE_VERSION</code> - Override version detection - <code>GPG_SIGN_CONFIRM</code> - Skip signing confirmation - <code>GITHUB_REPOSITORY</code> - Repository identification</p> <p>This modular approach ensures each script has a single responsibility while maintaining the overall security and reliability of the build process.</p>"},{"location":"customize/","title":"Customization Guide","text":"<p>Learn how to customize GH-Repos for your specific needs, from basic configuration to advanced setups.</p>"},{"location":"customize/#basic-customization","title":"Basic Customization","text":""},{"location":"customize/#repository-information","title":"Repository Information","text":"<p>Update the core repository details in <code>mkdocs.yml</code>:</p> <pre><code>site_name: Your Repository Name\nsite_description: Your custom description\nrepo_url: https://github.com/your-username/your-repo\nrepo_name: your-repo\n</code></pre>"},{"location":"customize/#branding-and-appearance","title":"Branding and Appearance","text":""},{"location":"customize/#theme-customization","title":"Theme Customization","text":"<p>Modify the Material theme settings:</p> <pre><code>theme:\n  name: material\n  palette:\n    primary: blue        # Your brand color\n    accent: light-blue   # Accent color\n  logo: assets/logo.png  # Your logo\n  favicon: assets/favicon.ico\n</code></pre>"},{"location":"customize/#custom-css","title":"Custom CSS","text":"<p>Add custom styling by creating <code>docs/assets/stylesheets/extra.css</code>:</p> <pre><code>:root {\n  --md-primary-fg-color: #your-color;\n  --md-accent-fg-color: #your-accent;\n}\n\n.md-header {\n  background: linear-gradient(45deg, #your-gradient);\n}\n</code></pre> <p>Then reference it in <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n  - assets/stylesheets/extra.css\n</code></pre>"},{"location":"customize/#package-configuration","title":"Package Configuration","text":""},{"location":"customize/#package-metadata","title":"Package Metadata","text":"<p>Customize package information in each <code>DEBIAN/control</code> file:</p> <pre><code>Package: your-package-name\nVersion: 1.0.0\nSection: utils\nPriority: optional\nArchitecture: amd64\nDepends: libc6 (&gt;= 2.17), other-package\nMaintainer: Your Name &lt;your.email@example.com&gt;\nHomepage: https://your-project.com\nDescription: Short description\n Long description goes here.\n Multiple lines are supported.\n .\n Use dots for paragraph breaks.\n</code></pre>"},{"location":"customize/#package-categories","title":"Package Categories","text":"<p>Organize packages by section:</p> <ul> <li><code>admin</code> - System administration utilities</li> <li><code>devel</code> - Development tools</li> <li><code>utils</code> - General utilities</li> <li><code>net</code> - Network applications</li> <li><code>libs</code> - Libraries</li> <li><code>games</code> - Games and entertainment</li> </ul>"},{"location":"customize/#multiple-architectures","title":"Multiple Architectures","text":"<p>Support different architectures by organizing packages:</p> <pre><code>pkgs/\n\u251c\u2500\u2500 my-tool/\n\u2502   \u251c\u2500\u2500 amd64/\n\u2502   \u2502   \u2514\u2500\u2500 DEBIAN/control  # Architecture: amd64\n\u2502   \u251c\u2500\u2500 arm64/\n\u2502   \u2502   \u2514\u2500\u2500 DEBIAN/control  # Architecture: arm64\n\u2502   \u2514\u2500\u2500 all/\n\u2502       \u2514\u2500\u2500 DEBIAN/control  # Architecture: all\n</code></pre>"},{"location":"customize/#gpg-key-management","title":"GPG Key Management","text":""},{"location":"customize/#generate-new-keys","title":"Generate New Keys","text":"<p>Create a dedicated signing key:</p> <pre><code># Generate a new GPG key\ngpg --full-generate-key\n\n# Export public key\ngpg --armor --export your-key-id &gt; keys/apt-repo-pubkey.asc\n\n# Export private key (keep secure!)\ngpg --armor --export-secret-keys your-key-id &gt; private-key.asc\n</code></pre>"},{"location":"customize/#hardware-token-integration","title":"Hardware Token Integration","text":"<p>For production environments, use a hardware token:</p> <pre><code># List available tokens\ngpg --card-status\n\n# Import key to token\ngpg --edit-key your-key-id\n&gt; keytocard\n</code></pre>"},{"location":"customize/#key-distribution","title":"Key Distribution","text":"<p>Make your public key easily accessible:</p> <pre><code># Host on key servers\ngpg --send-keys your-key-id\n\n# Include in repository\ncp public-key.asc keys/apt-repo-pubkey.asc\n</code></pre>"},{"location":"customize/#advanced-scripting","title":"Advanced Scripting","text":""},{"location":"customize/#custom-build-scripts","title":"Custom Build Scripts","text":"<p>Enhance <code>scripts/build.sh</code> for complex builds:</p> <pre><code>#!/usr/bin/env bash\nset -euo pipefail\n\n# Configuration\nPACKAGES_DIR=\"pkgs\"\nOUTPUT_DIR=\"docs/pool\"\nARCHITECTURES=(\"amd64\" \"arm64\" \"all\")\n\n# Build each package\nfor pkg_dir in \"$PACKAGES_DIR\"/*; do\n    if [[ -d \"$pkg_dir\" ]]; then\n        echo \"Building $(basename \"$pkg_dir\")...\"\n\n        # Custom build logic here\n        if [[ -f \"$pkg_dir/build.sh\" ]]; then\n            cd \"$pkg_dir\"\n            ./build.sh\n            cd - &gt; /dev/null\n        fi\n\n        # Create package\n        dpkg-deb --build \"$pkg_dir\" \"$OUTPUT_DIR/\"\n    fi\ndone\n\n# Generate repository metadata\n./scripts/generate-repo.sh\n</code></pre>"},{"location":"customize/#automated-versioning","title":"Automated Versioning","text":"<p>Implement semantic versioning:</p> <pre><code>#!/usr/bin/env bash\n\n# Get version from git tag\nVERSION=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.1.0\")\n\n# Update package versions\nfind pkgs -name \"control\" -exec sed -i \"s/Version:.*/Version: $VERSION/\" {} \\;\n\necho \"Updated packages to version $VERSION\"\n</code></pre>"},{"location":"customize/#custom-signing-process","title":"Custom Signing Process","text":"<p>Enhance <code>scripts/sign.sh</code> with robust error handling:</p> <pre><code>#!/usr/bin/env bash\nset -euo pipefail\n\nREPO_DIR=\"docs\"\nGPG_KEY_ID=\"${GPG_KEY_ID:-your-default-key-id}\"\n\n# Sign packages\nfind \"$REPO_DIR/pool\" -name \"*.deb\" | while read -r package; do\n    echo \"Signing $package...\"\n\n    # Create detached signature\n    gpg --detach-sign --armor \\\n        --local-user \"$GPG_KEY_ID\" \\\n        --output \"$package.asc\" \\\n        \"$package\"\ndone\n\n# Sign repository metadata\ncd \"$REPO_DIR\"\ngpg --detach-sign --armor \\\n    --local-user \"$GPG_KEY_ID\" \\\n    --output Release.gpg \\\n    Release\n\necho \"Repository signed successfully\"\n</code></pre>"},{"location":"customize/#github-actions-integration","title":"GitHub Actions Integration","text":""},{"location":"customize/#automated-builds","title":"Automated Builds","text":"<p>Create <code>.github/workflows/build.yml</code>:</p> <pre><code>name: Build and Deploy Packages\n\non:\n  push:\n    tags: ['v*']\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup environment\n      run: |\n        export UID=$(id -u)\n        export GID=$(id -g)\n\n    - name: Build packages\n      run: ./scripts/build.sh\n\n    - name: Sign packages\n      env:\n        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n      run: |\n        echo \"$GPG_PRIVATE_KEY\" | gpg --import\n        ./scripts/sign.sh\n\n    - name: Deploy to GitHub Pages\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./docs\n</code></pre>"},{"location":"customize/#security-considerations","title":"Security Considerations","text":"<p>Store sensitive data in GitHub Secrets:</p> <ul> <li><code>GPG_PRIVATE_KEY</code> - Your private GPG key</li> <li><code>GPG_PASSPHRASE</code> - Key passphrase (if any)</li> <li><code>SIGNING_TOKEN</code> - Hardware token PIN</li> </ul>"},{"location":"customize/#multi-repository-setup","title":"Multi-Repository Setup","text":""},{"location":"customize/#organization-repositories","title":"Organization Repositories","text":"<p>For multiple related repositories:</p> <pre><code>organization/\n\u251c\u2500\u2500 main-repo/          # Primary packages\n\u251c\u2500\u2500 testing-repo/       # Beta/testing packages\n\u251c\u2500\u2500 archive-repo/       # Deprecated packages\n\u2514\u2500\u2500 shared-configs/     # Common configurations\n</code></pre>"},{"location":"customize/#repository-inheritance","title":"Repository Inheritance","text":"<p>Share common configurations:</p> <pre><code># shared-configs/base.yml\ntheme:\n  name: material\n  palette:\n    primary: blue\n\n# main-repo/mkdocs.yml\nINHERIT: ../shared-configs/base.yml\nsite_name: Main Repository\n</code></pre>"},{"location":"customize/#documentation-customization","title":"Documentation Customization","text":""},{"location":"customize/#custom-pages","title":"Custom Pages","text":"<p>Add specialized documentation:</p> <pre><code>mkdocs/\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 usage.md\n\u251c\u2500\u2500 design.md\n\u251c\u2500\u2500 customize.md\n\u251c\u2500\u2500 releases.md\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 reference.md\n\u2514\u2500\u2500 examples/\n    \u251c\u2500\u2500 basic.md\n    \u2514\u2500\u2500 advanced.md\n</code></pre> <p>Update navigation in <code>mkdocs.yml</code>:</p> <pre><code>nav:\n  - Home: index.md\n  - Getting Started: usage.md\n  - Design: design.md\n  - Customization: customize.md\n  - API Reference:\n    - Overview: api/index.md\n    - Reference: api/reference.md\n  - Examples:\n    - Basic Usage: examples/basic.md\n    - Advanced: examples/advanced.md\n  - Releases: releases.md\n</code></pre>"},{"location":"customize/#extensions-and-plugins","title":"Extensions and Plugins","text":"<p>Add powerful extensions:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: true\n  - admonition\n  - codehilite\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n\nplugins:\n  - search\n  - git-revision-date-localized\n  - minify:\n      minify_html: true\n</code></pre>"},{"location":"customize/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"customize/#repository-statistics","title":"Repository Statistics","text":"<p>Track repository usage:</p> <pre><code># Add to scripts/stats.sh\n#!/usr/bin/env bash\n\necho \"Repository Statistics\"\necho \"====================\"\necho \"Packages: $(find docs/pool -name '*.deb' | wc -l)\"\necho \"Size: $(du -sh docs/pool | cut -f1)\"\necho \"Last Update: $(date)\"\n</code></pre>"},{"location":"customize/#user-analytics","title":"User Analytics","text":"<p>Add Google Analytics to track usage:</p> <pre><code># mkdocs.yml\nextra:\n  analytics:\n    provider: google\n    property: G-XXXXXXXXXX\n</code></pre> <p>With these customization options, you can adapt GH-Repos to meet your specific requirements while maintaining the core functionality and security features.</p> <p>Next: Check out the releases to see what's new.</p>"},{"location":"design/","title":"Design &amp; Architecture","text":"<p>The GH-Repos project provides a complete solution for hosting APT repositories on GitHub Pages with automated package management, signing, and deployment.</p>"},{"location":"design/#core-objectives","title":"Core Objectives","text":"<p>The aim is simple yet powerful:</p> <ul> <li>\u2705 Generate a GitHub Pages website from MkDocs</li> <li>\u2705 Publish an APT repository with proper GPG signatures on the website under <code>/apt</code></li> <li>\u2705 Automate package building, signing, and release processes</li> <li>\u2705 Provide a scalable foundation for multiple repository types</li> </ul>"},{"location":"design/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Development Environment\"\n        A[Developer] --&gt; B[VS Code + Dev Container]\n        B --&gt; C[Package Sources]\n    end\n\n    subgraph \"Build Pipeline\"\n        C --&gt; D[Build Script]\n        D --&gt; E[Package Creation]\n        E --&gt; F[GPG Signing]\n    end\n\n    subgraph \"GitHub Infrastructure\"\n        F --&gt; G[Git Repository]\n        G --&gt; H[GitHub Actions]\n        H --&gt; I[GitHub Pages]\n    end\n\n    subgraph \"Distribution\"\n        I --&gt; J[APT Repository]\n        J --&gt; K[End Users]\n        K --&gt; L[apt install]\n    end</code></pre>"},{"location":"design/#key-components","title":"Key Components","text":""},{"location":"design/#1-development-container","title":"1. Development Container","text":"<p>The project uses a sophisticated Dev Container setup to ensure consistent builds across different environments.</p>"},{"location":"design/#platform-requirements","title":"Platform Requirements","text":"<p>Linux-Specific Design</p> <p>Highly specific to Linux - some mechanisms are not available on macOS or Windows due to user mapping requirements.</p>"},{"location":"design/#user-alignment-strategy","title":"User Alignment Strategy","text":"<p>The system dynamically aligns container users with host users to prevent permission issues with bind mounts.</p>"},{"location":"design/#buildtime-configuration","title":"Buildtime Configuration","text":"<p>The <code>devcontainer.json</code> build args section sets username/uid/gid from shell environment:</p> <pre><code>{\n  \"build\": {\n    \"args\": {\n      \"USERNAME\": \"${localEnv:USER}\",\n      \"USER_UID\": \"${localEnv:UID}\",\n      \"USER_GID\": \"${localEnv:GID}\"\n    }\n  }\n}\n</code></pre> <p>Environment Variables Required</p> <p>Make sure all these values are exported in your environment: <pre><code>export UID=$(id -u)\nexport GID=$(id -g)\n</code></pre> Otherwise values default to: USERNAME=dev, USER_UID=1000, USER_GID=1000</p>"},{"location":"design/#runtime-adaptation","title":"Runtime Adaptation","text":"<p>Runtime properties ensure dynamic user alignment:</p> <pre><code>{\n  \"updateRemoteUserUID\": true,\n  \"containerUser\": \"${localEnv:USER}\",\n  \"remoteUser\": \"${localEnv:USER}\"\n}\n</code></pre> <p>This prevents permission issues even if the container was built with different user settings.</p>"},{"location":"design/#2-package-management","title":"2. Package Management","text":""},{"location":"design/#package-structure","title":"Package Structure","text":"<p>Each package follows Debian package conventions:</p> <pre><code>pkgs/\n\u2514\u2500\u2500 package-name/\n    \u251c\u2500\u2500 DEBIAN/\n    \u2502   \u251c\u2500\u2500 control          # Package metadata\n    \u2502   \u251c\u2500\u2500 postinst         # Post-installation script\n    \u2502   \u251c\u2500\u2500 prerm            # Pre-removal script\n    \u2502   \u2514\u2500\u2500 postrm           # Post-removal script\n    \u251c\u2500\u2500 usr/                 # File system layout\n    \u2502   \u251c\u2500\u2500 bin/             # Executables\n    \u2502   \u251c\u2500\u2500 share/           # Shared data\n    \u2502   \u2514\u2500\u2500 lib/             # Libraries\n    \u2514\u2500\u2500 build.sh             # Build script (optional)\n</code></pre>"},{"location":"design/#build-process","title":"Build Process","text":"<p>The build pipeline follows these steps:</p> <ol> <li>Source Preparation - Organize package files</li> <li>Dependency Resolution - Handle build dependencies</li> <li>Compilation - Build from source if needed</li> <li>Package Creation - Generate .deb files</li> <li>Metadata Generation - Create APT repository metadata</li> <li>GPG Signing - Sign packages and repository</li> </ol>"},{"location":"design/#3-security-model","title":"3. Security Model","text":""},{"location":"design/#gpg-key-management","title":"GPG Key Management","text":"<ul> <li>Public Key - Stored in <code>keys/apt-repo-pubkey.asc</code></li> <li>Private Key - Kept secure (hardware token recommended)</li> <li>Signing Process - Automated but secure</li> </ul>"},{"location":"design/#trust-chain","title":"Trust Chain","text":"<pre><code>graph LR\n    A[Package Source] --&gt; B[Build Process]\n    B --&gt; C[GPG Signing]\n    C --&gt; D[Repository Metadata]\n    D --&gt; E[User Verification]\n    E --&gt; F[Package Installation]</code></pre>"},{"location":"design/#4-github-pages-integration","title":"4. GitHub Pages Integration","text":""},{"location":"design/#repository-structure","title":"Repository Structure","text":"<pre><code>Repository Root\n\u251c\u2500\u2500 mkdocs/              # Documentation source\n\u251c\u2500\u2500 docs/                # Generated GitHub Pages content\n\u2502   \u251c\u2500\u2500 index.html       # Website homepage\n\u2502   \u251c\u2500\u2500 Packages         # APT package list\n\u2502   \u251c\u2500\u2500 Packages.gz      # Compressed package list\n\u2502   \u251c\u2500\u2500 Release          # Repository metadata\n\u2502   \u251c\u2500\u2500 Release.gpg      # GPG signature\n\u2502   \u2514\u2500\u2500 pool/            # Package files (.deb)\n\u2514\u2500\u2500 keys/                # GPG public keys\n</code></pre>"},{"location":"design/#dual-purpose-design","title":"Dual Purpose Design","text":"<p>The same repository serves as:</p> <ol> <li>Documentation Website - Built with MkDocs</li> <li>APT Repository - Standard Debian repository structure</li> </ol>"},{"location":"design/#5-automation-scripts","title":"5. Automation Scripts","text":""},{"location":"design/#build-script-scriptsbuildsh","title":"Build Script (<code>scripts/build.sh</code>)","text":"<ul> <li>Compiles packages from source</li> <li>Creates .deb files</li> <li>Generates repository metadata</li> </ul>"},{"location":"design/#signing-script-scriptssignsh","title":"Signing Script (<code>scripts/sign.sh</code>)","text":"<ul> <li>Signs individual packages</li> <li>Signs repository metadata</li> <li>Manages GPG operations</li> </ul>"},{"location":"design/#publishing-script-scriptspublishsh","title":"Publishing Script (<code>scripts/publish.sh</code>)","text":"<ul> <li>Prepares GitHub Pages content</li> <li>Updates repository structure</li> <li>Triggers deployment</li> </ul>"},{"location":"design/#extensibility","title":"Extensibility","text":""},{"location":"design/#beyond-apt-repositories","title":"Beyond APT Repositories","text":"<p>The architecture is designed for expansion:</p> <ul> <li>RPM Repositories - Red Hat package format</li> <li>Flatpak Repositories - Universal Linux packages</li> <li>Snap Repositories - Ubuntu universal packages</li> <li>Container Registries - Docker/OCI images</li> </ul>"},{"location":"design/#plugin-architecture","title":"Plugin Architecture","text":"<p>Future enhancements could include:</p> <ul> <li>Build Plugins - Custom build processes</li> <li>Signing Providers - Alternative signing methods</li> <li>Distribution Targets - Multiple hosting platforms</li> <li>Notification Systems - Build status updates</li> </ul>"},{"location":"design/#performance-considerations","title":"Performance Considerations","text":""},{"location":"design/#build-optimization","title":"Build Optimization","text":"<ul> <li>Incremental Builds - Only rebuild changed packages</li> <li>Parallel Processing - Multi-package builds</li> <li>Caching Strategies - Dependency and artifact caching</li> </ul>"},{"location":"design/#distribution-efficiency","title":"Distribution Efficiency","text":"<ul> <li>CDN Integration - Global content distribution</li> <li>Compression - Optimized package delivery</li> <li>Delta Updates - Incremental package updates</li> </ul>"},{"location":"design/#security-best-practices","title":"Security Best Practices","text":""},{"location":"design/#key-management","title":"Key Management","text":"<ol> <li>Hardware Tokens - Use for production signing</li> <li>Key Rotation - Regular key updates</li> <li>Backup Strategy - Secure key backup</li> <li>Access Control - Limited key access</li> </ol>"},{"location":"design/#package-integrity","title":"Package Integrity","text":"<ol> <li>Source Verification - Trusted source code</li> <li>Build Reproducibility - Consistent builds</li> <li>Signature Verification - End-to-end trust</li> <li>Vulnerability Scanning - Security analysis</li> </ol> <p>This design enables professional-grade package distribution while maintaining simplicity and security. The Dev Container approach ensures consistent builds while the GitHub Pages integration provides reliable hosting.</p> <p>Next: Learn how to customize the system for your needs.</p>"},{"location":"quickstart/","title":"GH-Repos Quickstart","text":"<p>Use this guide to reset your fork and prepare it for a brand-new project.</p>"},{"location":"quickstart/#1-fork-the-repository","title":"1. Fork the Repository","text":"<ol> <li>Open the upstream repository on GitHub.</li> <li>Click Fork and select the destination account or organization.</li> </ol>"},{"location":"quickstart/#2-run-the-preparation-script","title":"2. Run the Preparation Script","text":"<p>\u26a0\ufe0f Review scripts before piping them to <code>bash</code>.</p> <pre><code>curl -sSL https://raw.githubusercontent.com/&lt;your-account&gt;/gh-repos/main/prepare-template.sh | \\\n  bash -s -- git@github.com:&lt;your-account&gt;/gh-repos.git\n</code></pre> <p>What the script does:</p> <ul> <li>Clones your fork into a clean working directory.</li> <li>Replaces MkDocs source files with placeholder content.</li> <li>Removes the generated <code>docs/</code> output, including the previous APT repository.</li> <li>Rebuilds the site from the placeholder documentation.</li> <li>Lists your local GPG private keys so you can export one to <code>keys/apt-repo-pubkey.asc</code> and <code>docs/apt/apt-repo-pubkey.asc</code>.</li> </ul> <p>You can pass an optional second argument to name the clone directory explicitly:</p> <pre><code>bash prepare-template.sh https://github.com/&lt;your-account&gt;/gh-repos.git my-company-repo\n</code></pre>"},{"location":"quickstart/#3-customize-the-template","title":"3. Customize the Template","text":"<ul> <li>Replace each placeholder page in <code>mkdocs/</code> with project-specific content.</li> <li>Add, remove, or tweak packages in <code>pkgs/</code> as required.</li> <li>Regenerate docs with <code>./scripts/mkdocs.sh</code> and rebuild the APT repository with <code>./scripts/mkrepo.sh</code>.</li> </ul>"},{"location":"quickstart/#4-commit-and-push","title":"4. Commit and Push","text":"<pre><code>cd &lt;clone-directory&gt;\ngit status\ngit add .\ngit commit -m \"Prepare template for &lt;project-name&gt;\"\ngit push origin main\n</code></pre> <p>Your fork is now ready for customization and deployment. Iterate on documentation, automation, and packages as your project evolves.</p>"},{"location":"releases/","title":"Releases &amp; Changelog","text":"<p>Stay up to date with the latest features, improvements, and bug fixes in GH-Repos.</p>"},{"location":"releases/#current-version-v100-october-2025","title":"Current Version: v1.0.0 (October 2025)","text":""},{"location":"releases/#initial-release","title":"\ud83c\udf89 Initial Release","text":"<p>The first stable release of GH-Repos brings professional APT repository hosting to GitHub Pages.</p>"},{"location":"releases/#new-features","title":"\u2728 New Features","text":"<ul> <li>Complete APT Repository System</li> <li>Automated package building and signing</li> <li>GitHub Pages integration for hosting</li> <li> <p>GPG signature support for security</p> </li> <li> <p>Development Container Environment</p> </li> <li>Pre-configured Debian build environment</li> <li>Dynamic user mapping for Linux compatibility</li> <li> <p>VS Code integration with Dev Containers</p> </li> <li> <p>Documentation Website</p> </li> <li>MkDocs-powered documentation</li> <li>Material theme with modern design</li> <li> <p>Comprehensive guides and examples</p> </li> <li> <p>Build Automation Scripts</p> </li> <li><code>build.sh</code> - Package compilation and creation</li> <li><code>sign.sh</code> - GPG signing automation</li> <li><code>publish.sh</code> - Repository publishing</li> </ul>"},{"location":"releases/#core-components","title":"\ud83d\udd27 Core Components","text":"<ul> <li>Package Management</li> <li>Standard Debian package structure</li> <li>Multi-architecture support</li> <li> <p>Dependency resolution</p> </li> <li> <p>Security Features</p> </li> <li>GPG key management</li> <li>Package and repository signing</li> <li> <p>Hardware token support</p> </li> <li> <p>GitHub Integration</p> </li> <li>GitHub Pages deployment</li> <li>Version control integration</li> <li>Release automation</li> </ul>"},{"location":"releases/#upcoming-features","title":"Upcoming Features","text":""},{"location":"releases/#v110-planned","title":"v1.1.0 (Planned)","text":""},{"location":"releases/#enhanced-automation","title":"\ud83d\ude80 Enhanced Automation","text":"<ul> <li>GitHub Actions Workflows</li> <li>Automated builds on tag creation</li> <li>Continuous integration testing</li> <li> <p>Automatic deployment to GitHub Pages</p> </li> <li> <p>Improved Build System</p> </li> <li>Parallel package building</li> <li>Incremental builds for faster iterations</li> <li>Better error handling and reporting</li> </ul>"},{"location":"releases/#package-enhancements","title":"\ud83d\udce6 Package Enhancements","text":"<ul> <li>Multi-Distribution Support</li> <li>Ubuntu-specific packages</li> <li>Debian version targeting</li> <li> <p>Architecture-specific builds</p> </li> <li> <p>Package Validation</p> </li> <li>Linting for package metadata</li> <li>Dependency verification</li> <li>Quality checks</li> </ul>"},{"location":"releases/#v120-planned","title":"v1.2.0 (Planned)","text":""},{"location":"releases/#advanced-security","title":"\ud83d\udd12 Advanced Security","text":"<ul> <li>Enhanced Key Management</li> <li>Key rotation automation</li> <li>Multiple signing key support</li> <li> <p>Hardware Security Module (HSM) integration</p> </li> <li> <p>Package Verification</p> </li> <li>Vulnerability scanning</li> <li>Supply chain verification</li> <li>Reproducible builds</li> </ul>"},{"location":"releases/#multi-repository-support","title":"\ud83c\udf10 Multi-Repository Support","text":"<ul> <li>Repository Federation</li> <li>Multiple repository hosting</li> <li>Cross-repository dependencies</li> <li>Centralized management</li> </ul>"},{"location":"releases/#v200-future","title":"v2.0.0 (Future)","text":""},{"location":"releases/#beyond-apt","title":"\ud83d\ude80 Beyond APT","text":"<ul> <li>Multiple Package Formats</li> <li>RPM repository support</li> <li>Flatpak repository hosting</li> <li>Snap package distribution</li> <li> <p>Container registry integration</p> </li> <li> <p>Advanced Features</p> </li> <li>Package mirroring</li> <li>CDN integration</li> <li>Analytics and metrics</li> <li>API for programmatic access</li> </ul>"},{"location":"releases/#version-history","title":"Version History","text":""},{"location":"releases/#v090-development","title":"v0.9.0 (Development)","text":"<ul> <li>Initial development version</li> <li>Basic APT repository functionality</li> <li>Dev container setup</li> <li>Core documentation</li> </ul>"},{"location":"releases/#v080-alpha","title":"v0.8.0 (Alpha)","text":"<ul> <li>Proof of concept</li> <li>Basic package building</li> <li>GitHub Pages integration</li> <li>GPG signing prototype</li> </ul>"},{"location":"releases/#download-installation","title":"Download &amp; Installation","text":""},{"location":"releases/#latest-stable-release","title":"Latest Stable Release","text":"<pre><code># Clone the repository\ngit clone https://github.com/akarasulu/gh-repos.git\ncd gh-repos\n\n# Checkout latest stable version\ngit checkout v1.0.0\n</code></pre>"},{"location":"releases/#development-version","title":"Development Version","text":"<pre><code># Clone development version\ngit clone https://github.com/akarasulu/gh-repos.git\ncd gh-repos\n\n# Stay on main branch for latest features\ngit checkout main\n</code></pre>"},{"location":"releases/#upgrade-instructions","title":"Upgrade Instructions","text":""},{"location":"releases/#from-v0x-to-v100","title":"From v0.x to v1.0.0","text":"<p>This is a major release with breaking changes:</p> <ol> <li> <p>Backup your packages:    <pre><code>cp -r pkgs/ pkgs.backup/\n</code></pre></p> </li> <li> <p>Update configuration:</p> </li> <li>Review <code>mkdocs.yml</code> for new settings</li> <li>Update package control files</li> <li> <p>Regenerate GPG keys if needed</p> </li> <li> <p>Rebuild packages:    <pre><code>./scripts/build.sh\n./scripts/sign.sh\n./scripts/publish.sh\n</code></pre></p> </li> </ol>"},{"location":"releases/#general-upgrade-process","title":"General Upgrade Process","text":"<p>For patch and minor version updates:</p> <ol> <li> <p>Pull latest changes:    <pre><code>git fetch origin\ngit checkout v1.x.x  # Replace with target version\n</code></pre></p> </li> <li> <p>Update dependencies:    <pre><code># Rebuild dev container if needed\n</code></pre></p> </li> <li> <p>Rebuild if necessary:    <pre><code>./scripts/build.sh\n</code></pre></p> </li> </ol>"},{"location":"releases/#migration-guides","title":"Migration Guides","text":""},{"location":"releases/#from-manual-apt-repository","title":"From Manual APT Repository","text":"<p>If you're migrating from a manually managed APT repository:</p> <ol> <li>Package Structure: Convert to standard Debian package layout</li> <li>GPG Keys: Import existing signing keys</li> <li>Metadata: Regenerate repository metadata</li> <li>Testing: Verify package installation works</li> </ol>"},{"location":"releases/#from-other-systems","title":"From Other Systems","text":""},{"location":"releases/#from-ppa-personal-package-archive","title":"From PPA (Personal Package Archive)","text":"<ol> <li>Extract source packages from PPA</li> <li>Convert to GH-Repos package structure</li> <li>Update build scripts for new environment</li> <li>Test thoroughly before migration</li> </ol>"},{"location":"releases/#from-private-repository","title":"From Private Repository","text":"<ol> <li>Export package database</li> <li>Convert package metadata</li> <li>Migrate GPG keys securely</li> <li>Update client configurations</li> </ol>"},{"location":"releases/#support-compatibility","title":"Support &amp; Compatibility","text":""},{"location":"releases/#supported-platforms","title":"Supported Platforms","text":""},{"location":"releases/#build-environment","title":"Build Environment","text":"<ul> <li>\u2705 Linux (Ubuntu 20.04+, Debian 11+)</li> <li>\u26a0\ufe0f macOS (Limited support due to user mapping)</li> <li>\u274c Windows (Not supported for user mapping)</li> </ul>"},{"location":"releases/#target-distributions","title":"Target Distributions","text":"<ul> <li>\u2705 Debian (10, 11, 12)</li> <li>\u2705 Ubuntu (20.04, 22.04, 24.04)</li> <li>\u2705 Other Debian-based distributions</li> </ul>"},{"location":"releases/#requirements","title":"Requirements","text":""},{"location":"releases/#minimum-system-requirements","title":"Minimum System Requirements","text":"<ul> <li>Memory: 2GB RAM for container</li> <li>Storage: 10GB free space</li> <li>CPU: x86_64 or ARM64</li> </ul>"},{"location":"releases/#software-dependencies","title":"Software Dependencies","text":"<ul> <li>Docker 20.10+</li> <li>VS Code with Dev Containers extension</li> <li>Git 2.20+</li> <li>GPG 2.2+</li> </ul>"},{"location":"releases/#contributing","title":"Contributing","text":""},{"location":"releases/#reporting-issues","title":"Reporting Issues","text":"<p>Found a bug or have a feature request?</p> <ol> <li>Check existing issues on GitHub</li> <li>Provide detailed information:</li> <li>Operating system and version</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Relevant logs or error messages</li> </ol>"},{"location":"releases/#development-contributions","title":"Development Contributions","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Follow coding standards</li> <li>Add tests for new features</li> <li>Submit a pull request</li> </ol>"},{"location":"releases/#documentation-improvements","title":"Documentation Improvements","text":"<p>Help improve the documentation:</p> <ol> <li>Fix typos and errors</li> <li>Add examples and use cases</li> <li>Improve clarity and structure</li> <li>Translate to other languages</li> </ol>"},{"location":"releases/#release-notes-format","title":"Release Notes Format","text":"<p>Each release includes:</p> <ul> <li>\ud83c\udf89 New Features - Major new functionality</li> <li>\u2728 Enhancements - Improvements to existing features</li> <li>\ud83d\udc1b Bug Fixes - Resolved issues</li> <li>\ud83d\udd12 Security - Security-related updates</li> <li>\u26a0\ufe0f Breaking Changes - Changes requiring user action</li> <li>\ud83d\udcda Documentation - Documentation updates</li> </ul>"},{"location":"releases/#community","title":"Community","text":""},{"location":"releases/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Start with our comprehensive guides</li> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Ask questions and share experiences</li> </ul>"},{"location":"releases/#staying-updated","title":"Staying Updated","text":"<ul> <li>Watch the repository for release notifications</li> <li>Follow the changelog for detailed updates</li> <li>Join discussions for community insights</li> </ul> <p>Thank you for using GH-Repos! Your feedback and contributions help make this project better for everyone.</p>"},{"location":"usage/","title":"Getting Started","text":"<p>This guide will walk you through setting up your own APT repository using GitHub Pages.</p>"},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Linux environment (required for proper user mapping)</li> <li>Docker installed and running</li> <li>VS Code with Dev Containers extension</li> <li>GPG key for package signing</li> <li>GitHub account with repository access</li> </ul> <p>Important: User Environment Setup</p> <p>The devcontainer used to build packages will NOT align with your user unless you export UID/GID before launching VS Code: <pre><code>export UID=$(id -u)\nexport GID=$(id -g)\n</code></pre></p>"},{"location":"usage/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"usage/#1-fork-and-clone-repository","title":"1. Fork and Clone Repository","text":"<pre><code># Fork the repository on GitHub first, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/gh-repos.git\ncd gh-repos\n</code></pre>"},{"location":"usage/#2-configure-environment","title":"2. Configure Environment","text":"<p>Export your user ID and group ID to ensure proper container permissions:</p> <pre><code>export UID=$(id -u)\nexport GID=$(id -g)\n</code></pre> <p>Open the project in VS Code:</p> <pre><code>code .\n</code></pre> <p>When prompted, reopen in the Dev Container.</p>"},{"location":"usage/#3-add-your-packages","title":"3. Add Your Packages","text":"<p>Create package sources under the <code>pkgs/</code> directory:</p> <pre><code>mkdir -p pkgs/my-package\ncd pkgs/my-package\n</code></pre> <p>Each package should include: - Source code or binary files - DEBIAN/control file with package metadata - Build scripts (if applicable)</p>"},{"location":"usage/#example-package-structure","title":"Example Package Structure","text":"<pre><code>pkgs/\n\u2514\u2500\u2500 my-awesome-tool/\n    \u251c\u2500\u2500 DEBIAN/\n    \u2502   \u251c\u2500\u2500 control\n    \u2502   \u251c\u2500\u2500 postinst\n    \u2502   \u2514\u2500\u2500 prerm\n    \u251c\u2500\u2500 usr/\n    \u2502   \u2514\u2500\u2500 bin/\n    \u2502       \u2514\u2500\u2500 my-awesome-tool\n    \u2514\u2500\u2500 build.sh\n</code></pre>"},{"location":"usage/#example-debiancontrol-file","title":"Example DEBIAN/control File","text":"<pre><code>Package: my-awesome-tool\nVersion: 1.0.0\nSection: utils\nPriority: optional\nArchitecture: amd64\nMaintainer: Your Name &lt;your.email@example.com&gt;\nDescription: An awesome command-line tool\n This package provides an amazing command-line tool\n that does incredible things for your system.\n</code></pre>"},{"location":"usage/#4-configure-repository-information","title":"4. Configure Repository Information","text":"<p>Update the MkDocs configuration and documentation:</p> <ol> <li>Edit <code>mkdocs.yml</code> - Update site name, description, and repository URL</li> <li>Update documentation - Customize the content in <code>mkdocs/</code> directory</li> <li>Configure GPG keys - Place your public key in <code>keys/</code> directory</li> </ol>"},{"location":"usage/#5-build-and-test","title":"5. Build and Test","text":"<p>Build your packages locally:</p> <pre><code>./scripts/build.sh\n</code></pre> <p>Test the APT repository:</p> <pre><code>./scripts/publish.sh\n</code></pre>"},{"location":"usage/#6-deploy-to-github-pages","title":"6. Deploy to GitHub Pages","text":"<ol> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"Add my packages and customize repository\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Configure GitHub Pages:</p> </li> <li>Go to your repository settings</li> <li>Navigate to \"Pages\" section</li> <li>Set source to \"Deploy from a branch\"</li> <li> <p>Select \"main\" branch and \"/docs\" folder</p> </li> <li> <p>Create a release:    <pre><code>git tag -a v1.0.0 -m \"Release version 1.0.0\"\ngit push origin v1.0.0\n</code></pre></p> </li> </ol>"},{"location":"usage/#7-verify-your-repository","title":"7. Verify Your Repository","text":"<p>Once GitHub Pages is deployed, your APT repository will be available at: <pre><code>https://YOUR_USERNAME.github.io/gh-repos/\n</code></pre></p> <p>Users can add your repository with:</p> <pre><code># Add your repository\ncurl -fsSL https://YOUR_USERNAME.github.io/gh-repos/keys/apt-repo-pubkey.asc | sudo apt-key add -\necho \"deb https://YOUR_USERNAME.github.io/gh-repos/ ./\" | sudo tee /etc/apt/sources.list.d/your-repo.list\n\n# Update and install\nsudo apt update\nsudo apt install your-package-name\n</code></pre>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<ul> <li>Customize your repository further</li> <li>Review the design to understand the architecture</li> <li>Check releases for updates and changelog</li> </ul>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#permission-issues","title":"Permission Issues","text":"<p>Ensure UID/GID are exported before starting VS Code.</p>"},{"location":"usage/#gpg-signing-failures","title":"GPG Signing Failures","text":"<p>Verify your GPG key is properly configured and accessible within the container.</p>"},{"location":"usage/#build-failures","title":"Build Failures","text":"<p>Check package structure and DEBIAN/control file syntax.</p>"},{"location":"usage/#github-pages-not-updating","title":"GitHub Pages Not Updating","text":"<p>Ensure the <code>/docs</code> folder is committed and GitHub Pages source is correctly configured.</p> <p>Need help? Check our Design documentation or open an issue on GitHub.</p>"}]}