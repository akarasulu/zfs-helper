{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZFS Helper","text":"<p>A Linux OpenZFS delegation helper service for secure unprivileged ZFS operations.</p>"},{"location":"#overview","title":"Overview","text":"<p>ZFS Helper allows unprivileged systemd user-scoped services to securely request ZFS operations (mount, snapshot, rollback, create, destroy, rename, setprop, and share) on specific datasets and snapshots via a privileged socket-activated helper daemon, following a fine-grained user, operation, and delegate service policy.</p> <p>The privileged gateway service securely overcomes delegation limitations resulting from ZFS ports to Linux. The full gambit of ZFS features like delegated mounting, zero cost snapshots and rollback can be used to control and manage service storage volumes. It is especially useful for container engines like Podman, and its volume Quadlets to maintain data integrity across reboots and abrupt shutdowns.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>AF_UNIX + SO_PEERCRED: kernel-authenticated peer PID/UID/GID</li> <li>Enforces user-service origin: systemd user cgroup check</li> <li>Group-based access control: requires callers to belong to the <code>zfshelper</code> group</li> <li>Per-user authorized unit allowlist: glob patterns supported</li> <li>Per-action dataset allowlists: keyed by <code>&lt;user&gt; &lt;glob&gt;</code> entries with gitignore-style wildcards (<code>*</code>, <code>?</code>, <code>**</code>)</li> <li>Automatic ownership harmonisation: dataset creates/renames and snapshot creates chown mount trees to the caller's UID + primary GID</li> <li>Comprehensive audit logging: clear structured journald logs with ALLOW/DENY/ERROR reasons in JSON format</li> </ul>"},{"location":"#supported-operations","title":"Supported Operations","text":"<ul> <li><code>mount</code> / <code>unmount</code> - Mount and unmount ZFS datasets</li> <li><code>snapshot</code> - Create ZFS snapshots</li> <li><code>rollback</code> - Rollback to ZFS snapshots</li> <li><code>create</code> / <code>destroy</code> - Create and destroy ZFS datasets</li> <li><code>rename</code> - Rename ZFS datasets</li> <li><code>setprop</code> - Set ZFS properties (<code>mountpoint</code>/<code>canmount</code>/<code>sharenfs</code>)</li> <li><code>share</code> - Share ZFS datasets (limited implementation)</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to try ZFS Helper? Check out the Installation guide to get started, then review the Policy documentation to configure permissions for your users and services.</p> <p>For the latest updates and changes, see our Release Notes.</p>"},{"location":"design/","title":"Architecture &amp; Design","text":"<p>ZFS Helper implements a secure privilege delegation architecture that bridges the gap between unprivileged user services and privileged ZFS operations.</p>"},{"location":"design/#summary","title":"Summary","text":"<p><code>zfs-helper</code> is a privileged UNIX-domain socket daemon that executes a constrained set of <code>zfs(8)</code> operations on behalf of unprivileged systemd user services. Access is governed by per-user policy files stored under <code>/etc/zfs-helper/policy.d/&lt;user&gt;/</code>, allowing fine-grained control over datasets, snapshots, and property mutations. Requests are expressed as single-line JSON payloads; responses echo a JSON object containing a status code and informational string.</p>"},{"location":"design/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TD\n    A[\"User Service&lt;br/&gt;(unit@UID.service)\"] --&gt;|JSON over Unix socket| B[\"zfs-helper daemon\"]\n    B --&gt; C[\"Policy Loader&lt;br/&gt;(/etc/zfs-helper/policy.d)\"]\n    B --&gt; D[\"Action Dispatchers&lt;br/&gt;handle_* handlers\"]\n    D --&gt;|Subprocess| E[\"zfs(8)\"]\n    E --&gt; D\n    D --&gt;|Status + info| A\n</code></pre>"},{"location":"design/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    User Space (Unprivileged)                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 User Services   \u2502    \u2502 User Applications                    \u2502 \u2502\n\u2502  \u2502 - backup@.srv   \u2502    \u2502 - Container engines                  \u2502 \u2502\n\u2502  \u2502 - container@.srv\u2502    \u2502 - Backup scripts                     \u2502 \u2502\n\u2502  \u2502 - dev-env.srv   \u2502    \u2502 - Development tools                  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502                               \u2502                      \u2502\n\u2502           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                      \u2502\n\u2502                           \u2502                                      \u2502\n\u2502                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                             \u2502\n\u2502                  \u2502 zfs-helperctl   \u2502                             \u2502\n\u2502                  \u2502 (Client Tool)   \u2502                             \u2502\n\u2502                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                           \u2502                                      \u2502\n\u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502              \u2502    UNIX Socket          \u2502                         \u2502\n\u2502              \u2502 /run/zfs-helper.sock    \u2502                         \u2502\n\u2502              \u2502   (root:zfshelper)      \u2502                         \u2502\n\u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                    Root Space (Privileged)                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502              \u2502   zfs-helper.py         \u2502                         \u2502\n\u2502              \u2502   (Daemon)              \u2502                         \u2502\n\u2502              \u2502                         \u2502                         \u2502\n\u2502              \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                         \u2502\n\u2502              \u2502 \u2502 Policy Engine       \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - User validation   \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - Service validation\u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - Dataset validation\u2502 \u2502                         \u2502\n\u2502              \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                         \u2502\n\u2502              \u2502                         \u2502                         \u2502\n\u2502              \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                         \u2502\n\u2502              \u2502 \u2502 ZFS Interface       \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - Command execution \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - Error handling    \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2502 - Ownership mgmt    \u2502 \u2502                         \u2502\n\u2502              \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                         \u2502\n\u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n\u2502                           \u2502                                      \u2502\n\u2502                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                             \u2502\n\u2502                  \u2502   ZFS Kernel    \u2502                             \u2502\n\u2502                  \u2502   Module        \u2502                             \u2502\n\u2502                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"design/#request-lifecycle","title":"Request Lifecycle","text":"<pre><code>sequenceDiagram\n    participant Service as User Service\n    participant Socket as /run/zfs-helper.sock\n    participant Helper as zfs-helper\n    participant ZFS as /usr/sbin/zfs\n\n    Service-&gt;&gt;Socket: connect()\n    Service-&gt;&gt;Helper: send JSON payload\n    Helper-&gt;&gt;Helper: read_peer_ucred()\n    Helper-&gt;&gt;Helper: validate_request()\n    Helper-&gt;&gt;Helper: load_policy()\n    Helper-&gt;&gt;Helper: handle_action()\n    Helper-&gt;&gt;ZFS: subprocess.run([zfs, ...])\n    ZFS--&gt;&gt;Helper: stdout/stderr + return code\n    Helper--&gt;&gt;Service: JSON status response\n    Service-&gt;&gt;Socket: close()\n</code></pre>"},{"location":"design/#core-components","title":"Core Components","text":""},{"location":"design/#1-client-tool-zfs-helperctl","title":"1. Client Tool (<code>zfs-helperctl</code>)","text":"<p>Purpose: User-space interface for requesting ZFS operations Language: Bash script Location: <code>/usr/bin/zfs-helperctl</code></p> <p>Responsibilities: - Command-line argument parsing and validation - JSON payload construction - UNIX socket communication with daemon - Error reporting and status codes</p> <p>Security Features: - No privileged operations - Input validation and sanitization - Secure socket communication</p>"},{"location":"design/#2-privileged-daemon-zfs-helperpy","title":"2. Privileged Daemon (<code>zfs-helper.py</code>)","text":"<p>Purpose: Privileged service that executes authorized ZFS operations Language: Python 3 Location: <code>/usr/sbin/zfs-helper.py</code></p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    zfs-helper.py                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 Socket Handler  \u2502  \u2502 Auth Engine     \u2502  \u2502 ZFS Executor  \u2502 \u2502\n\u2502 \u2502 - Accept conns  \u2502  \u2502 - SO_PEERCRED   \u2502  \u2502 - Command run \u2502 \u2502\n\u2502 \u2502 - Parse JSON    \u2502  \u2502 - Cgroup check  \u2502  \u2502 - Output parse\u2502 \u2502\n\u2502 \u2502 - Validate msgs \u2502  \u2502 - Policy lookup \u2502  \u2502 - Error handle\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502          \u2502                     \u2502                    \u2502       \u2502\n\u2502          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502                    \u2502           \u2502                            \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502              Logging &amp; Audit Engine                     \u2502 \u2502\n\u2502 \u2502 - Structured JSON logs                                  \u2502 \u2502\n\u2502 \u2502 - ALLOW/DENY/ERROR decisions                            \u2502 \u2502\n\u2502 \u2502 - Performance metrics                                   \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"design/#detailed-behavior","title":"Detailed Behavior","text":""},{"location":"design/#socket-management","title":"Socket Management","text":"<p>The daemon prefers a systemd-provided socket via <code>LISTEN_FDS</code>; otherwise it binds <code>/run/zfs-helper.sock</code>, enforces <code>0660</code> permissions, and attempts to chown the path to the <code>zfshelper</code> group.</p>"},{"location":"design/#credential-verification","title":"Credential Verification","text":"<p><code>SO_PEERCRED</code> supplies <code>(pid, uid, gid)</code>. The peer must belong to a systemd user service (<code>user@UID.service/app.slice/\u2026</code>) that matches at least one glob in <code>units.list</code>.</p>"},{"location":"design/#group-membership","title":"Group Membership","text":"<p>Callers must be members of the <code>zfshelper</code> POSIX group; non-members receive <code>DENY_GROUP</code>.</p>"},{"location":"design/#per-user-dataset-checks","title":"Per-User Dataset Checks","text":"<p>Every dataset-policy line binds a dataset glob to an authorized username; requests from other users are denied even if the glob matches.</p>"},{"location":"design/#policy-lookup","title":"Policy Lookup","text":"<p>Policy files are optional, newline-delimited allow-lists. Empty or missing files imply denial except when fallbacks exist (e.g., <code>unmount</code> falls back to <code>mount</code> allow-list).</p>"},{"location":"design/#request-validation","title":"Request Validation","text":"<p>Payloads must be JSON with an <code>action</code> field. Root callers are rejected. Maximum payload size is capped at 8 KiB.</p>"},{"location":"design/#action-dispatch","title":"Action Dispatch","text":"<p>Supported actions map to dedicated handlers (<code>handle_mount</code>, <code>handle_snapshot</code>, etc.) that validate arguments using regexes, check policy globs, then invoke <code>zfs_ok</code>.</p>"},{"location":"design/#command-execution","title":"Command Execution","text":"<p><code>zfs_ok</code> wraps <code>subprocess.run</code>, collecting stdout/stderr. Results are normalized into <code>(status, info)</code> pairs where success yields <code>\"OK\"</code> and failures translate into <code>\"ERROR\"</code> or <code>\"DENY_*\"</code> codes.</p>"},{"location":"design/#ownership-harmonization","title":"Ownership Harmonization","text":"<p>Successful dataset creates and renames trigger a recursive chown of the dataset tree to the caller's UID and primary GID. Snapshot creates chown the corresponding <code>.zfs/snapshot/&lt;name&gt;</code> directories (recursively when <code>-r</code> is used).</p>"},{"location":"design/#logging","title":"Logging","text":"<p>All decisions flow through <code>log()</code>, emitting single-line structured records tagged by <code>LOG_TAG</code>.</p>"},{"location":"design/#supported-actions","title":"Supported Actions","text":"<p>Each handler sanitizes input using strict regexes (<code>DATASET_RE</code>, <code>SNAP_RE</code>) before deferring to <code>zfs(8)</code>:</p> <ul> <li><code>mount</code>, <code>unmount</code>, <code>share</code> - Dataset mounting and sharing operations</li> <li><code>snapshot</code>, <code>rollback</code>, <code>destroy</code> - Snapshot lifecycle management</li> <li><code>create</code>, <code>rename</code> - Dataset creation and renaming</li> <li><code>setprop</code> - Property setting (restricted to <code>mountpoint</code>, <code>canmount</code>, <code>sharenfs</code>)</li> </ul>"},{"location":"design/#policy-files-structure","title":"Policy Files Structure","text":"<p>Policy files control access at multiple levels:</p>"},{"location":"design/#service-authorization","title":"Service Authorization","text":"<ul> <li><code>units.list</code>: Allowed systemd unit globs</li> </ul>"},{"location":"design/#dataset-operations","title":"Dataset Operations","text":"<p>Per-operation files with <code>&lt;user&gt; &lt;dataset-glob&gt;</code> entries: - <code>mount.list</code>, <code>unmount.list</code>: Mount/unmount permissions - <code>snapshot.list</code>, <code>rollback.list</code>: Snapshot operations - <code>create.list</code>, <code>destroy.list</code>: Dataset lifecycle - <code>share.list</code>: Dataset sharing - <code>rename.from.list</code>, <code>rename.to.list</code>: Rename sources and destinations - <code>setprop.list</code>: Property modification targets</p>"},{"location":"design/#property-constraints","title":"Property Constraints","text":"<ul> <li><code>setprop.values.list</code>: Property key/value or mountpoint glob rules (<code>key=value</code> or <code>key:glob</code>)</li> </ul> <p>Notes: - Wildcard username <code>*</code> grants access to any <code>zfshelper</code> group member - Dataset globs use gitignore-style matching: <code>*</code> within segments, <code>**</code> across segments, <code>?</code> for single characters - Blank <code>setprop.values.list</code> falls back to builtin safety checks</p>"},{"location":"design/#security-architecture","title":"Security Architecture","text":""},{"location":"design/#multi-layer-authorization","title":"Multi-Layer Authorization","text":"<ol> <li>Network Layer: UNIX socket with group ownership</li> <li>Kernel Layer: SO_PEERCRED for authentic PID/UID/GID</li> <li>Process Layer: Systemd user service validation via cgroups</li> <li>Application Layer: Policy-based authorization</li> <li>Audit Layer: Comprehensive logging of all decisions</li> </ol>"},{"location":"design/#trust-boundaries","title":"Trust Boundaries","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Trust    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   User Space    \u2502\u2500 Boundary \u2500\u2502   Root Space    \u2502\n\u2502                 \u2502      \u2193      \u2502                 \u2502\n\u2502 - User services \u2502     UNIX    \u2502 - zfs-helper    \u2502\n\u2502 - zfs-helperctl \u2502    Socket   \u2502 - Policy files  \u2502\n\u2502 - Client tools  \u2502             \u2502 - ZFS commands  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Trust Model: - User space is untrusted - Socket provides authenticated communication - Root space validates all requests - Policy files define authorized operations - ZFS kernel module is final arbiter</p>"},{"location":"design/#privilege-escalation-prevention","title":"Privilege Escalation Prevention","text":"<ol> <li>Minimal Capabilities: Only <code>CAP_SYS_ADMIN</code> and <code>CAP_DAC_READ_SEARCH</code></li> <li>Syscall Filtering: Restricted to essential syscalls only</li> <li>Filesystem Protection: Most of filesystem is read-only</li> <li>Process Isolation: Private /tmp, /dev restrictions</li> <li>No New Privileges: Prevents privilege escalation</li> </ol>"},{"location":"design/#data-flow","title":"Data Flow","text":""},{"location":"design/#request-processing","title":"Request Processing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    JSON     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Validation    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502zfs-helperctl\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502zfs-helper.py\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502Policy Engine\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502                               \u2502\n                            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                            \u2502   ZFS CMD    \u2502               \u2502    ALLOW/    \u2502\n                            \u2502  Execution   \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502     DENY     \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                            \u2502   Response   \u2502\n                            \u2502  &amp; Logging   \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"design/#example-request-flow","title":"Example Request Flow","text":"<ol> <li>User Service: <code>systemctl --user start backup@pre-upgrade</code></li> <li>Client Call: <code>zfs-helperctl snapshot tank/home/alice@pre-upgrade</code></li> <li>JSON Message: <code>{\"action\":\"snapshot\",\"target\":\"tank/home/alice@pre-upgrade\"}</code></li> <li>Daemon Receives: Extracts PID/UID/GID via SO_PEERCRED</li> <li>Authorization: Checks cgroups, group membership, policy files</li> <li>Execution: <code>/usr/sbin/zfs snapshot tank/home/alice@pre-upgrade</code></li> <li>Response: Success/failure back to client</li> <li>Logging: Structured audit log with decision rationale</li> </ol>"},{"location":"design/#error-handling","title":"Error Handling","text":""},{"location":"design/#client-side-errors","title":"Client-Side Errors","text":"<ul> <li>Usage errors: Invalid arguments, missing parameters</li> <li>Connection errors: Socket unavailable, permission denied</li> <li>Communication errors: Malformed responses, timeouts</li> </ul>"},{"location":"design/#server-side-errors","title":"Server-Side Errors","text":"<ul> <li>Authentication errors: Invalid credentials, group membership</li> <li>Authorization errors: Policy violations, unauthorized operations</li> <li>Execution errors: ZFS command failures, system errors</li> </ul>"},{"location":"design/#logging-strategy","title":"Logging Strategy","text":"<p>All errors are logged with structured JSON containing: <pre><code>{\n  \"timestamp\": \"2025-10-24T12:00:00Z\",\n  \"level\": \"ERROR\",\n  \"caller_uid\": 1000,\n  \"caller_pid\": 12345,\n  \"service_unit\": \"backup@pre-upgrade.service\",\n  \"action\": \"snapshot\",\n  \"target\": \"tank/home/alice@pre-upgrade\",\n  \"decision\": \"DENY\",\n  \"reason\": \"dataset not in snapshot.list\",\n  \"policy_file\": \"/etc/zfs-helper/policy.d/alice/snapshot.list\"\n}\n</code></pre></p>"},{"location":"design/#performance-considerations","title":"Performance Considerations","text":""},{"location":"design/#socket-activation","title":"Socket Activation","text":"<ul> <li>Lazy Loading: Daemon starts only when needed</li> <li>Resource Efficiency: No continuous background process</li> <li>Fast Startup: Minimal initialization overhead</li> </ul>"},{"location":"design/#policy-caching","title":"Policy Caching","text":"<ul> <li>File Watching: Reload policies on file changes</li> <li>Memory Caching: Keep parsed policies in memory</li> <li>Glob Compilation: Pre-compile patterns for performance</li> </ul>"},{"location":"design/#zfs-command-optimization","title":"ZFS Command Optimization","text":"<ul> <li>Direct Execution: No shell interpretation overhead</li> <li>Minimal Parsing: Extract only necessary output</li> <li>Error Propagation: Preserve exit codes and messages</li> </ul>"},{"location":"design/#scalability","title":"Scalability","text":""},{"location":"design/#concurrent-requests","title":"Concurrent Requests","text":"<ul> <li>Single-threaded: Prevents race conditions</li> <li>Request Queuing: Socket backlog handles bursts</li> <li>Fast Processing: Sub-millisecond policy decisions</li> </ul>"},{"location":"design/#multi-user-support","title":"Multi-User Support","text":"<ul> <li>Per-User Policies: Isolated configuration</li> <li>Shared Infrastructure: Single daemon serves all users</li> <li>Efficient Lookup: O(1) policy file access</li> </ul>"},{"location":"design/#delegation-sync-script","title":"Delegation Sync Script","text":"<p><code>/usr/sbin/apply-delegation.py</code> ingests the policy tree and issues <code>zfs allow</code>/<code>unallow</code> calls so OpenZFS delegation matches the helper's view of who may run which operations.</p> <p>Managed permissions include: - <code>mount</code>, <code>snapshot</code>, <code>rollback</code>, <code>create</code>, <code>destroy</code>, <code>rename</code>, <code>share</code> (where supported) - Property grants (<code>property=mountpoint</code>, <code>property=canmount</code>, <code>property=sharenfs</code>)</p> <p>Usage: - Invoke with <code>--dry-run</code> to preview changes - Run without flags for enforcement - Commands that OpenZFS refuses to delegate log warnings but do not abort</p>"},{"location":"design/#failure-handling","title":"Failure Handling","text":""},{"location":"design/#policy-and-validation-failures","title":"Policy and Validation Failures","text":"<p>Policy or validation failures immediately respond with <code>DENY_*</code> or <code>BAD_*</code> codes without invoking <code>zfs</code>.</p>"},{"location":"design/#runtime-errors","title":"Runtime Errors","text":"<p>Runtime errors while servicing connections generate <code>\"ERROR\"</code> responses and get logged with truncated info payloads.</p>"},{"location":"design/#connection-handling","title":"Connection Handling","text":"<p>The main accept loop tolerates transient exceptions (sleeping 50 ms) and exits cleanly on <code>KeyboardInterrupt</code>.</p>"},{"location":"design/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"design/#systemd-socket-activation","title":"Systemd Socket Activation","text":"<p>Systemd socket activation is supported by inheriting file descriptor 3 when <code>LISTEN_FDS=1</code>.</p>"},{"location":"design/#manual-socket-management","title":"Manual Socket Management","text":"<p>Without socket activation, ensure the daemon can create <code>/run/zfs-helper.sock</code> and that the <code>zfshelper</code> group contains trusted user services.</p>"},{"location":"design/#policy-hot-loading","title":"Policy Hot-Loading","text":"<p>Policies are hot-loaded per request; updates to files take effect on the next action without restarting the daemon.</p>"},{"location":"design/#performance-considerations_1","title":"Performance Considerations","text":""},{"location":"design/#socket-activation_1","title":"Socket Activation","text":"<ul> <li>Lazy Loading: Daemon starts only when needed</li> <li>Resource Efficiency: No continuous background process</li> <li>Fast Startup: Minimal initialization overhead</li> </ul>"},{"location":"design/#policy-caching_1","title":"Policy Caching","text":"<ul> <li>File Watching: Reload policies on file changes</li> <li>Memory Caching: Keep parsed policies in memory</li> <li>Glob Compilation: Pre-compile patterns for performance</li> </ul>"},{"location":"design/#zfs-command-optimization_1","title":"ZFS Command Optimization","text":"<ul> <li>Direct Execution: No shell interpretation overhead</li> <li>Minimal Parsing: Extract only necessary output</li> <li>Error Propagation: Preserve exit codes and messages</li> </ul>"},{"location":"design/#scalability_1","title":"Scalability","text":""},{"location":"design/#concurrent-requests_1","title":"Concurrent Requests","text":"<ul> <li>Single-threaded: Prevents race conditions</li> <li>Request Queuing: Socket backlog handles bursts</li> <li>Fast Processing: Sub-millisecond policy decisions</li> </ul>"},{"location":"design/#multi-user-support_1","title":"Multi-User Support","text":"<ul> <li>Per-User Policies: Isolated configuration</li> <li>Shared Infrastructure: Single daemon serves all users</li> <li>Efficient Lookup: O(1) policy file access</li> </ul>"},{"location":"design/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"design/#potential-enhancements","title":"Potential Enhancements","text":"<ol> <li>Multi-threaded Processing: For high-concurrency environments</li> <li>Policy Caching: Redis/memory-based policy store</li> <li>Remote Management: Web UI for policy administration</li> <li>Audit Database: Structured storage for log analysis</li> <li>Plugin Architecture: Extensible operation handlers</li> <li>Performance Metrics: Prometheus integration</li> <li>Configuration Management: Ansible/Puppet modules</li> </ol>"},{"location":"design/#backwards-compatibility","title":"Backwards Compatibility","text":"<ul> <li>API Versioning: JSON protocol versioning</li> <li>Policy Migration: Automatic policy file updates</li> <li>Configuration Compatibility: Maintain existing file formats</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation_1","title":"Installation","text":"<p>ZFS Helper can be installed using Debian packages or from source. The Debian package method is recommended for most users.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Operating System: Linux with systemd \u2265 240</li> <li>ZFS: OpenZFS installed (<code>zfsutils-linux</code> package)</li> <li>Root privileges: Required for installing system services</li> </ul>"},{"location":"installation/#method-1-debian-packages-recommended","title":"Method 1: Debian Packages (Recommended)","text":""},{"location":"installation/#add-the-apt-repository","title":"Add the APT Repository","text":"<p>First, add the ZFS Helper APT repository:</p> <pre><code>curl -fsSL https://akarasulu.github.io/zfs-helper/apt/repo-setup.sh | sudo bash\n</code></pre>"},{"location":"installation/#install-the-packages","title":"Install the Packages","text":"<pre><code>sudo apt update\nsudo apt install zfs-helper zfs-helper-client\n</code></pre> <p>This installs: - <code>zfs-helper</code>: Core daemon and systemd units - <code>zfs-helper-client</code>: Client tools (<code>zfs-helperctl</code>) and examples</p>"},{"location":"installation/#verification","title":"Verification","text":"<p>Check that the service is running:</p> <pre><code>sudo systemctl status zfs-helper.socket\nsudo systemctl status zfs-helper.service\n</code></pre>"},{"location":"installation/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<p>If you prefer to install from source or the packages aren't available for your distribution:</p>"},{"location":"installation/#download-and-extract","title":"Download and Extract","text":"<pre><code># Download from GitHub releases\nwget https://github.com/akarasulu/zfs-helper/archive/main.tar.gz\ntar -xf main.tar.gz\ncd zfs-helper-main\n</code></pre>"},{"location":"installation/#run-the-installer","title":"Run the Installer","text":"<pre><code># Example installation for a user with specific permissions\nsudo bash install-zfs-helper.sh \\\n  --user $USER \\\n  --unit-globs 'backup@*.service' \\\n  --mount-globs 'tank/home/'\"$USER\"'*' \\\n  --snapshot-globs 'tank/home/'\"$USER\"',tank/home/'\"$USER\"'/*' \\\n  --rollback-globs 'tank/home/'\"$USER\"',tank/home/'\"$USER\"'/*' \\\n  --create-globs 'tank/scratch/*' \\\n  --destroy-globs 'tank/scratch/*' \\\n  --rename-from-globs 'tank/data/tmp-*' \\\n  --rename-to-globs 'tank/data/archive/*' \\\n  --setprop-globs 'tank/home/'\"$USER\"'*' \\\n  --setprop-values 'canmount=on,canmount=noauto,sharenfs=on,sharenfs=off,mountpoint:/home/'\"$USER\"'*' \\\n  --share-globs 'tank/home/'\"$USER\"'*'\n</code></pre> <p>The installer: - Creates the <code>zfshelper</code> group - Installs daemon and client tools - Sets up systemd units - Creates policy directory structure - Enables and starts the socket service</p>"},{"location":"installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"installation/#add-users-to-the-group","title":"Add Users to the Group","text":"<p>Users who need to use ZFS Helper must be added to the <code>zfshelper</code> group:</p> <pre><code>sudo usermod -aG zfshelper username\n</code></pre> <p>Important: Users must log out and back in to pick up the new group membership.</p>"},{"location":"installation/#configure-policies","title":"Configure Policies","text":"<p>Create policy files for each user under <code>/etc/zfs-helper/policy.d/username/</code>. See the Policy documentation for details.</p>"},{"location":"installation/#test-the-installation","title":"Test the Installation","text":"<p>As a user in the <code>zfshelper</code> group, from within a systemd user service:</p> <pre><code># This should be run from a systemd user service, not directly from shell\nzfs-helperctl snapshot tank/home/$USER@test\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#service-not-starting","title":"Service Not Starting","text":"<p>Check the service logs:</p> <pre><code>sudo journalctl -u zfs-helper.service -f\n</code></pre>"},{"location":"installation/#permission-denied","title":"Permission Denied","text":"<p>Ensure: 1. User is in the <code>zfshelper</code> group 2. User has logged out and back in 3. Command is run from an authorized systemd user service 4. Policy files are configured correctly</p>"},{"location":"installation/#zfs-command-not-found","title":"ZFS Command Not Found","text":"<p>Install OpenZFS:</p> <pre><code># Debian/Ubuntu\nsudo apt install zfsutils-linux\n\n# Red Hat/CentOS/Fedora\nsudo dnf install zfs-utils\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, configure policies for your users and services. See the Policy Documentation for detailed configuration instructions.</p>"},{"location":"policy/","title":"Policy Configuration","text":"<p>ZFS Helper uses a policy-based authorization system to control which users and services can perform ZFS operations on specific datasets. This provides fine-grained security while maintaining ease of administration.</p>"},{"location":"policy/#policy-directory-structure","title":"Policy Directory Structure","text":"<p>Per-user policy configuration is stored under: <pre><code>/etc/zfs-helper/policy.d/&lt;username&gt;/\n</code></pre></p> <p>Each user directory can contain the following policy files:</p>"},{"location":"policy/#service-authorization","title":"Service Authorization","text":"<p><code>units.list</code> - Glob patterns for allowed systemd user unit names <pre><code>backup@*.service\nsync.service\ncontainer-*.service\n</code></pre></p>"},{"location":"policy/#dataset-operation-lists","title":"Dataset Operation Lists","text":"<p>Dataset-scoped lists that expect one entry per line in the format: <pre><code>&lt;user&gt; &lt;dataset-glob&gt;\n</code></pre></p> <p>Available operation files: - <code>mount.list</code> - Datasets the user can mount - <code>unmount.list</code> - Datasets the user can unmount (optional - inherits from mount.list if not present) - <code>snapshot.list</code> - Datasets the user can snapshot - <code>rollback.list</code> - Datasets the user can rollback - <code>create.list</code> - Datasets the user can create - <code>destroy.list</code> - Datasets the user can destroy - <code>rename.from.list</code> - Source datasets for rename operations - <code>rename.to.list</code> - Target datasets for rename operations - <code>share.list</code> - Datasets the user can share - <code>setprop.list</code> - Datasets where the user can set properties</p>"},{"location":"policy/#property-value-constraints","title":"Property Value Constraints","text":"<p><code>setprop.values.list</code> - Allowed property values for setprop operations <pre><code>canmount=on\ncanmount=noauto\ncanmount=off\nsharenfs=on\nsharenfs=off\nmountpoint:/home/alice*\nmountpoint:/var/lib/containers*\n</code></pre></p>"},{"location":"policy/#user-and-dataset-matching","title":"User and Dataset Matching","text":""},{"location":"policy/#user-specifications","title":"User Specifications","text":"<ul> <li>Use the literal username: <code>alice</code></li> <li>Use wildcard for any zfshelper member: <code>*</code></li> </ul>"},{"location":"policy/#dataset-glob-patterns","title":"Dataset Glob Patterns","text":"<p>ZFS Helper uses gitignore-style wildcards: - <code>*</code> - Matches within a single dataset component - <code>**</code> - Matches across dataset components - <code>?</code> - Matches a single character</p> <p>Examples: <pre><code>alice tank/home/alice/**     # Alice can access any dataset under her home\n*     tank/projects/shared/*  # Any user can access shared project datasets\nbob   tank/backup/bob         # Bob can access his specific backup dataset\n</code></pre></p>"},{"location":"policy/#complete-policy-example","title":"Complete Policy Example","text":"<p>Here's a complete policy setup for user \"alice\":</p>"},{"location":"policy/#etczfs-helperpolicydaliceunitslist","title":"<code>/etc/zfs-helper/policy.d/alice/units.list</code>","text":"<pre><code>backup@*.service\ncontainer@*.service\nsync.service\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicemountlist","title":"<code>/etc/zfs-helper/policy.d/alice/mount.list</code>","text":"<pre><code>alice tank/home/alice\nalice tank/home/alice/**\n*     tank/shared/*\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicesnapshotlist","title":"<code>/etc/zfs-helper/policy.d/alice/snapshot.list</code>","text":"<pre><code>alice tank/home/alice\nalice tank/home/alice/**\nalice tank/backup/alice/**\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicecreatelist","title":"<code>/etc/zfs-helper/policy.d/alice/create.list</code>","text":"<pre><code>alice tank/scratch/*\nalice tank/home/alice/tmp/*\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicedestroylist","title":"<code>/etc/zfs-helper/policy.d/alice/destroy.list</code>","text":"<pre><code>alice tank/scratch/*\nalice tank/home/alice/tmp/*\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicesetproplist","title":"<code>/etc/zfs-helper/policy.d/alice/setprop.list</code>","text":"<pre><code>alice tank/home/alice/**\n</code></pre>"},{"location":"policy/#etczfs-helperpolicydalicesetpropvalueslist","title":"<code>/etc/zfs-helper/policy.d/alice/setprop.values.list</code>","text":"<pre><code>canmount=on\ncanmount=noauto\nmountpoint:/home/alice*\nsharenfs=off\n</code></pre>"},{"location":"policy/#policy-rules-and-logic","title":"Policy Rules and Logic","text":""},{"location":"policy/#authorization-flow","title":"Authorization Flow","text":"<ol> <li>Group membership: User must be in <code>zfshelper</code> group</li> <li>Service origin: Must be called from authorized systemd user service</li> <li>Unit authorization: Service name must match patterns in <code>units.list</code></li> <li>Operation authorization: Dataset must match patterns in operation-specific list</li> <li>Value constraints: For setprop, values must match <code>setprop.values.list</code></li> </ol>"},{"location":"policy/#deny-by-default","title":"Deny-by-Default","text":"<ul> <li>Absence of an allow rule = deny</li> <li>Empty policy files = no permissions</li> <li>Missing operation files = no permissions for that operation</li> </ul>"},{"location":"policy/#rule-merging","title":"Rule Merging","text":"<ul> <li>Any matching allow rule grants permission</li> <li>Multiple matching rules don't conflict</li> <li>More specific rules don't override broader ones</li> </ul>"},{"location":"policy/#policy-management-best-practices","title":"Policy Management Best Practices","text":""},{"location":"policy/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>Principle of least privilege: Grant minimal necessary permissions</li> <li>User-specific directories: Keep policies focused on individual users</li> <li>Regular audits: Review and update policies periodically</li> <li>Test changes: Use <code>apply-delegation.py --dry-run</code> to preview changes</li> </ol>"},{"location":"policy/#organization-tips","title":"Organization Tips","text":"<ol> <li>Consistent naming: Use clear, descriptive dataset names</li> <li>Logical grouping: Group related datasets under common prefixes</li> <li>Documentation: Comment policy decisions in separate documentation</li> <li>Version control: Track policy changes in git</li> </ol>"},{"location":"policy/#policy-synchronization","title":"Policy Synchronization","text":"<p>ZFS Helper policies can be synchronized with native ZFS delegation using the <code>apply-delegation.py</code> tool:</p>"},{"location":"policy/#preview-changes","title":"Preview Changes","text":"<pre><code>sudo /usr/sbin/apply-delegation.py --dry-run\n</code></pre>"},{"location":"policy/#apply-changes","title":"Apply Changes","text":"<pre><code>sudo /usr/sbin/apply-delegation.py\n</code></pre>"},{"location":"policy/#important-notes","title":"Important Notes","text":"<ul> <li>The script manages a focused set of permissions</li> <li>Operations that OpenZFS refuses to delegate are skipped but reported</li> <li>Avoid running for datasets that don't exist yet</li> <li>Wildcards resolve only to present dataset names</li> </ul>"},{"location":"policy/#troubleshooting-policies","title":"Troubleshooting Policies","text":""},{"location":"policy/#permission-denied-errors","title":"Permission Denied Errors","text":"<ol> <li>Check user is in <code>zfshelper</code> group: <code>groups username</code></li> <li>Verify service name matches <code>units.list</code> patterns</li> <li>Confirm dataset matches operation-specific list</li> <li>For setprop, verify value is in <code>setprop.values.list</code></li> </ol>"},{"location":"policy/#policy-not-taking-effect","title":"Policy Not Taking Effect","text":"<ol> <li>Restart the zfs-helper service: <code>sudo systemctl restart zfs-helper.service</code></li> <li>Check policy file syntax and permissions</li> <li>Verify policy directory ownership: <code>ls -la /etc/zfs-helper/policy.d/</code></li> </ol>"},{"location":"policy/#debugging","title":"Debugging","text":"<p>Check the service logs for detailed authorization decisions: <pre><code>sudo journalctl -u zfs-helper.service -f\n</code></pre></p> <p>All authorization decisions are logged in structured JSON format with clear ALLOW/DENY/ERROR reasons.</p>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get ZFS Helper running in 5 minutes with this step-by-step guide.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux system with systemd \u2265 240</li> <li>OpenZFS installed (<code>zfsutils-linux</code>)</li> <li>At least one ZFS pool available</li> <li>Root access for installation</li> </ul>"},{"location":"quickstart/#step-1-install-zfs-helper","title":"Step 1: Install ZFS Helper","text":""},{"location":"quickstart/#option-a-debian-packages-recommended","title":"Option A: Debian Packages (Recommended)","text":"<pre><code># Add the repository\ncurl -fsSL https://akarasulu.github.io/zfs-helper/apt/repo-setup.sh | sudo bash\n\n# Install packages\nsudo apt update\nsudo apt install zfs-helper zfs-helper-client\n</code></pre>"},{"location":"quickstart/#option-b-manual-installation","title":"Option B: Manual Installation","text":"<pre><code># Download and extract\nwget https://github.com/akarasulu/zfs-helper/archive/main.tar.gz\ntar -xf main.tar.gz\ncd zfs-helper-main\n\n# Run installer\nsudo bash install-zfs-helper.sh --user $USER \\\n  --unit-globs 'backup@*.service' \\\n  --snapshot-globs 'tank/home/'\"$USER\"'*'\n</code></pre>"},{"location":"quickstart/#step-2-configure-a-user","title":"Step 2: Configure a User","text":"<pre><code># Add yourself to the zfshelper group\nsudo usermod -aG zfshelper $USER\n\n# Log out and back in to pick up group membership\nexit\n# ... log back in ...\n\n# Verify group membership\ngroups | grep zfshelper\n</code></pre>"},{"location":"quickstart/#step-3-create-basic-policies","title":"Step 3: Create Basic Policies","text":"<pre><code># Create policy directory\nsudo mkdir -p /etc/zfs-helper/policy.d/$USER\n\n# Allow backup services\necho \"backup@*.service\" | sudo tee /etc/zfs-helper/policy.d/$USER/units.list\n\n# Allow snapshots (adjust dataset path as needed)\necho \"$USER tank/home/$USER\" | sudo tee /etc/zfs-helper/policy.d/$USER/snapshot.list\necho \"$USER tank/home/$USER/**\" | sudo tee -a /etc/zfs-helper/policy.d/$USER/snapshot.list\n</code></pre>"},{"location":"quickstart/#step-4-create-a-test-service","title":"Step 4: Create a Test Service","text":"<pre><code># Create systemd user directory\nmkdir -p ~/.config/systemd/user\n\n# Create a simple backup service\ncat &gt; ~/.config/systemd/user/backup@.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Create snapshot %i\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/zfs-helperctl snapshot tank/home/${USER}@%i\nEOF\n\n# Reload systemd\nsystemctl --user daemon-reload\n</code></pre>"},{"location":"quickstart/#step-5-test-it","title":"Step 5: Test It","text":"<pre><code># Create a snapshot\nsystemctl --user start backup@quickstart-test\n\n# Check if it worked\nzfs list -t snapshot | grep quickstart-test\n\n# Check service status\nsystemctl --user status backup@quickstart-test\n</code></pre>"},{"location":"quickstart/#step-6-verify-logs","title":"Step 6: Verify Logs","text":"<pre><code># Check zfs-helper daemon logs\nsudo journalctl -u zfs-helper.service -n 10\n\n# Check user service logs\njournalctl --user -u backup@quickstart-test\n</code></pre> <p>If everything worked, you should see: - A new snapshot named <code>tank/home/$USER@quickstart-test</code> - Success logs in both the daemon and user service - No error messages</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>Now that ZFS Helper is working:</p> <ol> <li>Read the Usage Guide for more examples</li> <li>Configure more policies in <code>/etc/zfs-helper/policy.d/$USER/</code></li> <li>Create more services for your specific needs</li> <li>Review security in the Policy Documentation</li> </ol>"},{"location":"quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quickstart/#permission-denied-errors","title":"\"Permission denied\" errors","text":"<ul> <li>Ensure you're in the <code>zfshelper</code> group: <code>groups</code></li> <li>Check you logged out and back in after adding the group</li> <li>Verify policy files exist: <code>ls /etc/zfs-helper/policy.d/$USER/</code></li> </ul>"},{"location":"quickstart/#service-not-found-errors","title":"\"Service not found\" errors","text":"<ul> <li>Ensure zfs-helper-client is installed: <code>which zfs-helperctl</code></li> <li>Check the daemon is running: <code>sudo systemctl status zfs-helper.socket</code></li> </ul>"},{"location":"quickstart/#dataset-not-allowed-errors","title":"\"Dataset not allowed\" errors","text":"<ul> <li>Check your dataset path in the policy files</li> <li>Verify the dataset exists: <code>zfs list</code></li> <li>Ensure the policy pattern matches your dataset</li> </ul>"},{"location":"quickstart/#still-stuck","title":"Still stuck?","text":"<p>Check the Usage Guide for more detailed troubleshooting steps.</p>"},{"location":"release/","title":"Release Process","text":"<p>ZFS Helper uses the gh-repos approach for building and releasing Debian packages through a devcontainer-based build system.</p>"},{"location":"release/#overview","title":"Overview","text":"<p>Releases are built using GitHub Actions and a Debian 12 devcontainer that includes all necessary packaging tools. The process creates signed Debian packages and publishes them to an APT repository hosted on GitHub Pages.</p>"},{"location":"release/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git: Configured for signed tags (GPG key available)</li> <li>GPG: For signing releases and repository metadata</li> <li>GitHub CLI (optional): For release automation</li> <li>Access: Push access to the repository</li> </ul>"},{"location":"release/#build-process","title":"Build Process","text":"<p>The build system uses several scripts in the <code>scripts/</code> directory:</p>"},{"location":"release/#local-development-build","title":"Local Development Build","text":"<pre><code># Build packages in devcontainer\n./scripts/build.sh\n\n# Build Debian packages\n./scripts/mkdebs.sh\n\n# Build documentation\n./scripts/mkdocs.sh\n\n# Create APT repository\n./scripts/mkrepo.sh\n\n# Sign repository metadata\n./scripts/signrepo.sh\n\n# Publish to GitHub Pages\n./scripts/publish.sh\n</code></pre>"},{"location":"release/#release-workflow","title":"Release Workflow","text":"<pre><code># Create and publish a full release\n./scripts/release.sh 1.0.0 release-notes.md\n</code></pre> <p>This script: 1. Creates a GPG-signed annotated git tag 2. Builds Debian packages in the devcontainer 3. Generates documentation with MkDocs 4. Creates the APT repository structure 5. Signs repository metadata with GPG 6. Creates a GitHub release with artifacts 7. Publishes to GitHub Pages (gh-pages branch)</p>"},{"location":"release/#package-versions","title":"Package Versions","text":"<p>Packages are versioned using semantic versioning (MAJOR.MINOR.PATCH): - MAJOR: Breaking changes to API or configuration - MINOR: New features, backward-compatible changes - PATCH: Bug fixes and maintenance updates</p>"},{"location":"release/#apt-repository-structure","title":"APT Repository Structure","text":"<p>The published APT repository is available at: <pre><code>https://akarasulu.github.io/zfs-helper/apt/\n</code></pre></p> <p>Repository structure: <pre><code>docs/apt/\n\u251c\u2500\u2500 apt-repo-pubkey.asc     # GPG public key for verification\n\u251c\u2500\u2500 repo-setup.sh           # Installation script for users\n\u251c\u2500\u2500 dists/stable/           # Repository metadata\n\u2502   \u251c\u2500\u2500 InRelease           # Signed repository info\n\u2502   \u251c\u2500\u2500 Release             # Repository metadata\n\u2502   \u251c\u2500\u2500 Release.gpg         # GPG signature\n\u2502   \u2514\u2500\u2500 main/               # Package indices\n\u2514\u2500\u2500 pool/                   # Package files (.deb)\n</code></pre></p>"},{"location":"release/#security","title":"Security","text":""},{"location":"release/#package-signing","title":"Package Signing","text":"<ul> <li>All packages are built in a clean devcontainer environment</li> <li>Repository metadata is signed with GPG</li> <li>Users verify packages using the published GPG key</li> </ul>"},{"location":"release/#gpg-key-management","title":"GPG Key Management","text":"<ul> <li>Public key is distributed via the repository</li> <li>Private key is used only for signing releases</li> <li>Key fingerprint should be published separately for verification</li> </ul>"},{"location":"release/#user-installation","title":"User Installation","text":"<p>End users install packages using:</p> <pre><code># Add repository and install\ncurl -fsSL https://akarasulu.github.io/zfs-helper/apt/repo-setup.sh | sudo bash\nsudo apt update\nsudo apt install zfs-helper zfs-helper-client\n</code></pre>"},{"location":"release/#troubleshooting-releases","title":"Troubleshooting Releases","text":""},{"location":"release/#build-failures","title":"Build Failures","text":"<ul> <li>Check devcontainer configuration</li> <li>Verify all dependencies are available in Debian 12</li> <li>Review build logs in GitHub Actions</li> </ul>"},{"location":"release/#signing-issues","title":"Signing Issues","text":"<ul> <li>Ensure GPG key is available and not expired</li> <li>Check GPG agent configuration</li> <li>Verify key has appropriate permissions</li> </ul>"},{"location":"release/#repository-publishing","title":"Repository Publishing","text":"<ul> <li>Confirm GitHub Pages is enabled</li> <li>Check gh-pages branch exists and is up to date</li> <li>Verify repository structure matches expected format</li> </ul>"},{"location":"release/#development-workflow","title":"Development Workflow","text":"<ol> <li>Feature Development: Work on feature branches</li> <li>Testing: Validate changes in devcontainer</li> <li>Documentation: Update relevant documentation</li> <li>Package Testing: Build and test packages locally</li> <li>Release: Tag and publish when ready</li> </ol> <p>The gh-repos approach ensures consistent, reproducible builds and simplifies the release process compared to the previous manual script-based approach.</p>"},{"location":"testing/","title":"Testing Framework","text":"<p>ZFS Helper includes a comprehensive automated test harness using <code>pytest</code> to run integration tests against a Debian 12 VM provisioned via Vagrant and libvirt. Each test executes ZFS operations through the helper in an isolated ephemeral zpool, verifying correct behavior, policy enforcement, ownership, and logging.</p> <p>The value of this system lies not just in the code, but in the rigorous testing that ensures correctness and security in real-world scenarios.</p>"},{"location":"testing/#test-architecture","title":"Test Architecture","text":"<pre><code>graph TB\n  subgraph HOST [Host Machine]\n    GH[GitHub Repo zfs-helper]\n    PY[pytest test runner]\n    VA[Vagrant CLI libvirt]\n    AN[Ansible optional]\n    AR[Artifacts logs reports]\n  end\n\n  subgraph VM [Debian 12 VM systemd]\n    SYS[systemd user and system]\n    ZFS[ZFS stack]\n    ZHS[zfs-helper.socket]\n    ZHC[zfs-helperctl CLI]\n    ZH[zfs-helper service]\n    DISKS[Extra virtio disks]\n    DATA[Ephemeral zpools per test]\n    LOGS[Journal and service logs]\n  end\n\n  PY --&gt; VA\n  AN --&gt; VA\n  GH --&gt; PY\n\n  VA --&gt; VM\n  PY --&gt; VA\n  PY --&gt; VM\n\n  SYS --&gt; ZHS\n  ZHS --&gt; ZH\n  ZHC --&gt; ZHS\n  ZH --&gt; ZFS\n  ZFS --&gt; DATA\n  ZH --&gt; LOGS\n\n  PY --&gt; AR\n  VM --&gt; AR\n  DISKS --&gt; ZFS\n  ZFS --&gt; DATA\n</code></pre>"},{"location":"testing/#test-lifecycle","title":"Test Lifecycle","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant Dev as Developer\n  participant Py as pytest\n  participant Va as Vagrant\n  participant V as Debian 12 VM\n  participant Sd as systemd\n  participant Zc as zfs-helperctl\n  participant Zh as zfs-helper\n  participant Zf as ZFS\n\n  Dev-&gt;&gt;Py: run tests\n  Py-&gt;&gt;Va: ensure VM up\n  Va-&gt;&gt;V: boot and provision if first run\n  Va-&gt;&gt;Va: save baseline snapshot\n\n  loop each test\n    Py-&gt;&gt;Va: restore baseline snapshot\n    Py-&gt;&gt;V: prepare test pool\n    Py-&gt;&gt;Zc: run command mount or snapshot or rollback\n    Zc-&gt;&gt;Sd: trigger socket\n    Sd-&gt;&gt;Zh: start service\n    Zh-&gt;&gt;Zf: perform ZFS operation\n    Zf--&gt;&gt;Zh: result\n    Zh--&gt;&gt;Zc: json status\n    alt failure\n      Py-&gt;&gt;Va: save failed snapshot\n    end\n    Py-&gt;&gt;V: collect logs and status\n    V--&gt;&gt;Py: artifacts\n  end\n</code></pre>"},{"location":"testing/#test-coverage","title":"Test Coverage","text":""},{"location":"testing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Policy parsing: Validate glob patterns, user matching, dataset resolution</li> <li>Request validation: JSON parsing, schema validation, input sanitization</li> <li>Action handlers: Individual operation logic and parameter validation</li> <li>Logging: Structured output format and decision tracking</li> </ul>"},{"location":"testing/#integration-tests","title":"Integration Tests","text":"<p>End-to-end request flows for all supported actions:</p>"},{"location":"testing/#core-operations","title":"Core Operations","text":"<ul> <li><code>mount</code> / <code>unmount</code> - Dataset mounting and unmounting</li> <li><code>snapshot</code> - Snapshot creation with proper naming</li> <li><code>rollback</code> - Dataset rollback to snapshots</li> <li><code>create</code> / <code>destroy</code> - Dataset lifecycle management</li> <li><code>rename</code> - Dataset renaming with validation</li> <li><code>setprop</code> - Property setting with constraints</li> <li><code>share</code> - Dataset sharing (where supported)</li> </ul>"},{"location":"testing/#security-tests","title":"Security Tests","text":"<ul> <li>Authorization: Verify policy enforcement</li> <li>Authentication: Group membership validation</li> <li>Service origin: Systemd user service requirement</li> <li>Credential validation: SO_PEERCRED verification</li> </ul>"},{"location":"testing/#negative-testing","title":"Negative Testing","text":"<ul> <li>Unauthorized units: Services not in <code>units.list</code></li> <li>Disallowed datasets: Datasets outside policy scope</li> <li>Invalid arguments: Malformed commands and parameters</li> <li>Root callers: Rejection of privileged users</li> <li>Malformed payloads: Invalid JSON and missing fields</li> </ul>"},{"location":"testing/#ownership-verification","title":"Ownership Verification","text":"<ul> <li>Dataset creation: Correct UID/GID assignment</li> <li>Snapshot creation: Proper <code>.zfs/snapshot</code> ownership</li> <li>Recursive operations: Ownership inheritance</li> <li>Permission inheritance: Group and mode preservation</li> </ul>"},{"location":"testing/#logging-validation","title":"Logging Validation","text":"<ul> <li>Decision logging: All ALLOW/DENY decisions recorded</li> <li>Structured format: JSON logging with required fields</li> <li>Error tracking: Exception and failure logging</li> <li>Audit trail: Complete request/response logging</li> </ul>"},{"location":"testing/#delegation-sync-testing","title":"Delegation Sync Testing","text":"<ul> <li>Policy reflection: <code>apply-delegation.py</code> accuracy</li> <li>ZFS delegation: Native delegation matching policies</li> <li>Dry-run mode: Preview functionality</li> <li>Error handling: Unsupported delegation graceful handling</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<pre><code># Install test dependencies\nsudo apt install vagrant libvirt-dev python3-pytest\n\n# Install Python test requirements\npip3 install pytest pytest-asyncio vagrant-python\n</code></pre>"},{"location":"testing/#test-execution","title":"Test Execution","text":"<pre><code># Run all tests\npytest tests/\n\n# Run specific test categories\npytest tests/unit/           # Unit tests only\npytest tests/integration/    # Integration tests only\npytest tests/security/       # Security-focused tests\n\n# Run with coverage\npytest --cov=zfs-helper tests/\n\n# Verbose output with logs\npytest -v -s tests/\n</code></pre>"},{"location":"testing/#vm-management","title":"VM Management","text":"<pre><code># Start test VM\nvagrant up\n\n# SSH into test VM\nvagrant ssh\n\n# Clean VM state\nvagrant destroy -f &amp;&amp; vagrant up\n\n# Save VM snapshot\nvagrant snapshot save baseline\n\n# Restore VM snapshot\nvagrant snapshot restore baseline\n</code></pre>"},{"location":"testing/#test-environment","title":"Test Environment","text":""},{"location":"testing/#vm-configuration","title":"VM Configuration","text":"<ul> <li>OS: Debian 12 (bookworm)</li> <li>Memory: 2GB RAM</li> <li>Storage: Additional virtio disks for ZFS pools</li> <li>Network: NAT with SSH forwarding</li> <li>Services: systemd, ZFS, zfs-helper</li> </ul>"},{"location":"testing/#zfs-test-pools","title":"ZFS Test Pools","text":"<p>Each test creates ephemeral zpools: <pre><code># Example test pool creation\nzpool create test-pool /dev/vdb\nzfs create test-pool/test-dataset\n</code></pre></p>"},{"location":"testing/#policy-test-files","title":"Policy Test Files","text":"<p>Tests create temporary policy configurations: <pre><code>/etc/zfs-helper/policy.d/testuser/\n\u251c\u2500\u2500 units.list\n\u251c\u2500\u2500 mount.list\n\u251c\u2500\u2500 snapshot.list\n\u2514\u2500\u2500 setprop.values.list\n</code></pre></p>"},{"location":"testing/#test-categories","title":"Test Categories","text":""},{"location":"testing/#smoke-tests","title":"Smoke Tests","text":"<p>Quick validation of basic functionality: - Service startup and socket creation - Basic mount/unmount operations - Simple snapshot creation - Policy file loading</p>"},{"location":"testing/#regression-tests","title":"Regression Tests","text":"<p>Prevent known issues from reoccurring: - Previous bug fixes - Edge case handling - Error condition recovery - Performance regressions</p>"},{"location":"testing/#stress-tests","title":"Stress Tests","text":"<p>High-load and concurrent scenarios: - Multiple simultaneous requests - Large dataset operations - Memory usage validation - Socket connection limits</p>"},{"location":"testing/#security-tests_1","title":"Security Tests","text":"<p>Comprehensive security validation: - Privilege escalation attempts - Policy bypass attempts - Input injection testing - Authentication bypass testing</p>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Test Suite\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Test Environment\n        run: ./scripts/setup-ci.sh\n      - name: Run Tests\n        run: pytest tests/ --junit-xml=results.xml\n      - name: Upload Results\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-results\n          path: results.xml\n</code></pre>"},{"location":"testing/#test-reporting","title":"Test Reporting","text":"<ul> <li>Coverage reports: HTML and console output</li> <li>JUnit XML: CI system integration</li> <li>Performance metrics: Timing and resource usage</li> <li>Failure artifacts: VM snapshots and logs</li> </ul>"},{"location":"testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"testing/#log-collection","title":"Log Collection","text":"<pre><code># Collect all relevant logs\nsudo journalctl -u zfs-helper.service &gt; daemon.log\njournalctl --user &gt; user-services.log\ndmesg &gt; kernel.log\n</code></pre>"},{"location":"testing/#vm-debugging","title":"VM Debugging","text":"<pre><code># Access test VM\nvagrant ssh\n\n# Check ZFS status\nzfs list\nzpool status\n\n# Check service status\nsystemctl status zfs-helper.socket\nsystemctl --user status\n</code></pre>"},{"location":"testing/#test-debugging","title":"Test Debugging","text":"<pre><code># Run specific failing test\npytest -v tests/test_mount.py::test_unauthorized_mount\n\n# Debug with pdb\npytest --pdb tests/test_mount.py\n\n# Capture stdout\npytest -s tests/test_mount.py\n</code></pre>"},{"location":"testing/#contributing-tests","title":"Contributing Tests","text":""},{"location":"testing/#adding-new-tests","title":"Adding New Tests","text":"<ol> <li>Create test files in appropriate directories</li> <li>Follow naming convention: <code>test_*.py</code></li> <li>Use descriptive test names: <code>test_mount_with_valid_policy</code></li> <li>Include both positive and negative test cases</li> <li>Add appropriate fixtures and cleanup</li> </ol>"},{"location":"testing/#test-standards","title":"Test Standards","text":"<ul> <li>Isolation: Each test should be independent</li> <li>Cleanup: Restore system state after tests</li> <li>Documentation: Clear test descriptions and comments</li> <li>Coverage: Aim for high code coverage</li> <li>Performance: Tests should complete reasonably quickly</li> </ul>"},{"location":"testing/#mock-usage","title":"Mock Usage","text":"<p>For unit tests, mock external dependencies: <pre><code>@patch('subprocess.run')\ndef test_zfs_command_execution(mock_run):\n    mock_run.return_value.returncode = 0\n    # Test logic here\n</code></pre></p> <p>This comprehensive testing framework ensures ZFS Helper maintains high quality, security, and reliability across all supported use cases and environments.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide walks through common usage patterns and real-world examples of ZFS Helper.</p>"},{"location":"usage/#basic-workflow","title":"Basic Workflow","text":""},{"location":"usage/#1-user-setup","title":"1. User Setup","text":"<p>First, ensure the user is properly configured:</p> <pre><code># Add user to zfshelper group (as root)\nsudo usermod -aG zfshelper alice\n\n# User must log out and back in\nexit\n# ... log back in ...\n\n# Verify group membership\ngroups\n# Should show: alice ... zfshelper\n</code></pre>"},{"location":"usage/#2-policy-configuration","title":"2. Policy Configuration","text":"<p>Create policy files for the user:</p> <pre><code># Create policy directory (as root)\nsudo mkdir -p /etc/zfs-helper/policy.d/alice\n\n# Allow backup services\necho \"backup@*.service\" | sudo tee /etc/zfs-helper/policy.d/alice/units.list\n\n# Allow snapshots of user's datasets\necho \"alice tank/home/alice\" | sudo tee /etc/zfs-helper/policy.d/alice/snapshot.list\necho \"alice tank/home/alice/**\" | sudo tee -a /etc/zfs-helper/policy.d/alice/snapshot.list\n</code></pre>"},{"location":"usage/#3-create-user-service","title":"3. Create User Service","text":"<p>Create a systemd user service that uses ZFS Helper:</p> <pre><code># Create user systemd directory\nmkdir -p ~/.config/systemd/user\n\n# Create backup service\ncat &gt; ~/.config/systemd/user/backup@.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Snapshot before job %i\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c 'zfs-helperctl snapshot tank/home/${USER}@%i'\nEOF\n\n# Reload systemd\nsystemctl --user daemon-reload\n</code></pre>"},{"location":"usage/#4-use-the-service","title":"4. Use the Service","text":"<pre><code># Create a snapshot\nsystemctl --user start backup@pre-upgrade\n\n# Check if it worked\nzfs list -t snapshot | grep pre-upgrade\n</code></pre>"},{"location":"usage/#common-use-cases","title":"Common Use Cases","text":""},{"location":"usage/#container-volume-management","title":"Container Volume Management","text":"<p>Use ZFS Helper to manage container volumes with Podman Quadlets:</p> <pre><code># Policy for container management\necho \"container@*.service\" | sudo tee -a /etc/zfs-helper/policy.d/alice/units.list\necho \"alice tank/containers/alice/**\" | sudo tee /etc/zfs-helper/policy.d/alice/mount.list\necho \"alice tank/containers/alice/**\" | sudo tee /etc/zfs-helper/policy.d/alice/snapshot.list\necho \"alice tank/containers/alice/**\" | sudo tee /etc/zfs-helper/policy.d/alice/create.list\n</code></pre> <p>Example container service: <pre><code>cat &gt; ~/.config/systemd/user/container@.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Container %i with ZFS volume\nAfter=zfs-helper.socket\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStartPre=/usr/bin/zfs-helperctl create tank/containers/${USER}/%i\nExecStartPre=/usr/bin/zfs-helperctl mount tank/containers/${USER}/%i\nExecStart=/usr/bin/podman run -d --name %i -v /tank/containers/${USER}/%i:/data alpine:latest sleep infinity\nExecStop=/usr/bin/podman stop %i\nExecStopPost=/usr/bin/podman rm %i\nExecStopPost=/usr/bin/zfs-helperctl unmount tank/containers/${USER}/%i\n\n[Install]\nWantedBy=default.target\nEOF\n</code></pre></p>"},{"location":"usage/#backup-workflows","title":"Backup Workflows","text":"<p>Automated backup with snapshots:</p> <pre><code>cat &gt; ~/.config/systemd/user/daily-backup.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Daily backup with snapshot\n\n[Service]\nType=oneshot\nExecStart=/bin/bash -c '\n  SNAPSHOT=\"tank/home/${USER}@daily-$(date +%%Y%%m%%d)\"\n  zfs-helperctl snapshot \"$SNAPSHOT\"\n  # Add your backup commands here\n  rsync -av /home/${USER}/ /backup/location/\n'\nEOF\n\ncat &gt; ~/.config/systemd/user/daily-backup.timer &lt;&lt; 'EOF'\n[Unit]\nDescription=Run daily backup\n\n[Timer]\nOnCalendar=daily\nPersistent=true\n\n[Install]\nWantedBy=timers.target\nEOF\n\n# Enable the timer\nsystemctl --user enable --now daily-backup.timer\n</code></pre>"},{"location":"usage/#development-environment-management","title":"Development Environment Management","text":"<p>Quickly create and destroy development datasets:</p> <pre><code># Policy for development\necho \"alice tank/dev/**\" | sudo tee /etc/zfs-helper/policy.d/alice/create.list\necho \"alice tank/dev/**\" | sudo tee /etc/zfs-helper/policy.d/alice/destroy.list\necho \"alice tank/dev/**\" | sudo tee /etc/zfs-helper/policy.d/alice/mount.list\necho \"alice tank/dev/**\" | sudo tee /etc/zfs-helper/policy.d/alice/snapshot.list\n\n# Development project service\ncat &gt; ~/.config/systemd/user/dev-env@.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Development environment for %i\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStartPre=/usr/bin/zfs-helperctl create tank/dev/${USER}/%i\nExecStartPre=/usr/bin/zfs-helperctl mount tank/dev/${USER}/%i\nExecStart=/bin/bash -c 'echo \"Development environment ready at /tank/dev/${USER}/%i\"'\nExecStop=/usr/bin/zfs-helperctl unmount tank/dev/${USER}/%i\nExecStopPost=/usr/bin/zfs-helperctl destroy tank/dev/${USER}/%i\n\n[Install]\nWantedBy=default.target\nEOF\n</code></pre>"},{"location":"usage/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"usage/#rollback-on-failure","title":"Rollback on Failure","text":"<p>Service that automatically rolls back on failure:</p> <pre><code>cat &gt; ~/.config/systemd/user/safe-update.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Safe update with automatic rollback\n\n[Service]\nType=oneshot\nExecStartPre=/usr/bin/zfs-helperctl snapshot tank/home/${USER}@pre-update\nExecStart=/path/to/your/update-script.sh\nExecStopPost=/bin/bash -c '\n  if [ \"$SERVICE_RESULT\" != \"success\" ]; then\n    echo \"Update failed, rolling back...\"\n    zfs-helperctl rollback tank/home/${USER}@pre-update\n  fi\n'\nEOF\n</code></pre>"},{"location":"usage/#property-management","title":"Property Management","text":"<p>Dynamically adjust dataset properties:</p> <pre><code># Policy for property changes\necho \"alice tank/home/alice/**\" | sudo tee /etc/zfs-helper/policy.d/alice/setprop.list\necho \"canmount=on\" | sudo tee /etc/zfs-helper/policy.d/alice/setprop.values.list\necho \"canmount=noauto\" | sudo tee -a /etc/zfs-helper/policy.d/alice/setprop.values.list\n\n# Service to toggle auto-mounting\ncat &gt; ~/.config/systemd/user/toggle-automount@.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Toggle automount for dataset %i\n\n[Service]\nType=oneshot\nExecStart=/bin/bash -c '\n  CURRENT=$(zfs get -H -o value canmount %i)\n  if [ \"$CURRENT\" = \"on\" ]; then\n    zfs-helperctl setprop %i canmount noauto\n  else\n    zfs-helperctl setprop %i canmount on\n  fi\n'\nEOF\n</code></pre>"},{"location":"usage/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"usage/#check-service-status","title":"Check Service Status","text":"<pre><code># Check if zfs-helper daemon is running\nsudo systemctl status zfs-helper.socket\nsudo systemctl status zfs-helper.service\n\n# View recent logs\nsudo journalctl -u zfs-helper.service -n 50\n\n# Follow logs in real-time\nsudo journalctl -u zfs-helper.service -f\n</code></pre>"},{"location":"usage/#user-service-debugging","title":"User Service Debugging","text":"<pre><code># Check user service status\nsystemctl --user status backup@pre-upgrade\n\n# View user service logs\njournalctl --user -u backup@pre-upgrade\n\n# Test zfs-helperctl directly (from within a service context)\nsystemd-run --user --wait zfs-helperctl snapshot tank/home/$USER@test\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#common-issues","title":"Common Issues","text":"<p>Permission Denied <pre><code># Check group membership\ngroups\n\n# Check policy files exist\nls -la /etc/zfs-helper/policy.d/$USER/\n\n# Check service name matches policy\ngrep \"$(systemctl --user show -p Id --value)\" /etc/zfs-helper/policy.d/$USER/units.list\n</code></pre></p> <p>Command Not Found <pre><code># Ensure zfs-helper-client is installed\ndpkg -l | grep zfs-helper-client\n\n# Check PATH includes /usr/bin\necho $PATH\n</code></pre></p> <p>Service Won't Start <pre><code># Check systemd user session is running\nsystemctl --user status\n\n# Check socket is accessible\nls -la /run/zfs-helper.sock\n\n# Test socket connectivity\necho '{\"action\":\"snapshot\",\"target\":\"test\"}' | socat - UNIX-CONNECT:/run/zfs-helper.sock\n</code></pre></p>"},{"location":"usage/#best-practices","title":"Best Practices","text":"<ol> <li>Test policies in dry-run mode before applying</li> <li>Use specific dataset patterns rather than overly broad wildcards</li> <li>Monitor logs regularly for security events</li> <li>Keep policies minimal - grant only necessary permissions</li> <li>Document your services and their ZFS requirements</li> <li>Use meaningful snapshot names with timestamps</li> <li>Clean up test datasets and snapshots regularly</li> </ol>"},{"location":"usage/#security-considerations","title":"Security Considerations","text":"<ul> <li>Always run from systemd user services, never from interactive shells</li> <li>Regularly audit policy files for unnecessary permissions</li> <li>Monitor zfs-helper logs for unusual activity</li> <li>Keep ZFS Helper and client tools updated</li> <li>Use specific dataset paths rather than wildcards when possible</li> <li>Consider using separate ZFS pools for different security domains</li> </ul>"}]}