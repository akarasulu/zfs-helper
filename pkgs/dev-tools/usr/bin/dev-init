#!/bin/bash
# dev-init - Initialize new development projects

source /etc/dev-tools/config.conf 2>/dev/null || true

usage() {
    echo "Usage: dev-init [OPTIONS] <project-name>"
    echo ""
    echo "Initialize a new development project"
    echo ""
    echo "Options:"
    echo "  -t, --template TEMPLATE    Use specific template (basic, python, web, go)"
    echo "  -d, --directory DIR        Create in specific directory"
    echo "  -h, --help                 Show this help message"
    echo ""
    echo "Examples:"
    echo "  dev-init my-project"
    echo "  dev-init -t python my-python-app"
    echo "  dev-init -d ~/projects my-web-app"
}

template="$DEFAULT_TEMPLATE"
directory="."
project_name=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--template)
            template="$2"
            shift 2
            ;;
        -d|--directory)
            directory="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            if [[ -z "$project_name" ]]; then
                project_name="$1"
            else
                echo "Error: Unknown option $1"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

if [[ -z "$project_name" ]]; then
    echo "Error: Project name is required"
    usage
    exit 1
fi

project_path="$directory/$project_name"

if [[ -d "$project_path" ]]; then
    echo "Error: Directory $project_path already exists"
    exit 1
fi

echo "Creating project: $project_name"
echo "Template: $template"
echo "Directory: $project_path"

mkdir -p "$project_path"
cd "$project_path"

# Initialize based on template
case "$template" in
    basic)
        echo "# $project_name" > README.md
        echo -e "*.log\n.DS_Store\n.env" > .gitignore
        echo "MIT License" > LICENSE
        ;;
    python)
        echo "# $project_name" > README.md
        cat > setup.py << EOF
from setuptools import setup, find_packages

setup(
    name="$project_name",
    version="0.1.0",
    packages=find_packages(),
    python_requires=">=3.7",
)
EOF
        echo -e "__pycache__/\n*.pyc\n.env\nvenv/\n.pytest_cache/" > .gitignore
        echo -e "requests\npytest" > requirements.txt
        mkdir -p src
        touch src/__init__.py
        ;;
    web)
        cat > index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$project_name</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Welcome to $project_name</h1>
    <script src="script.js"></script>
</body>
</html>
EOF
        echo "/* Styles for $project_name */" > style.css
        echo "// JavaScript for $project_name" > script.js
        echo "# $project_name" > README.md
        ;;
    go)
        echo "module $project_name" > go.mod
        cat > main.go << EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello from $project_name!")
}
EOF
        echo "# $project_name" > README.md
        echo -e "*.exe\n*.dll\n*.so\n*.dylib\n$project_name" > .gitignore
        ;;
    *)
        echo "Unknown template: $template"
        echo "Available templates: basic, python, web, go"
        exit 1
        ;;
esac

# Initialize git repository
git init
git add .
git commit -m "Initial commit: $project_name project created with $template template"

echo ""
echo "‚úÖ Project '$project_name' created successfully!"
echo "üìÅ Location: $project_path"
echo "üåü Template: $template"
echo ""
echo "Next steps:"
echo "  cd $project_path"
echo "  # Start developing!"